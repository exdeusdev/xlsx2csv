(function(g,f){typeof exports==='object'&&typeof module!=='undefined'?module.exports=f():typeof define==='function'&&define.amd?define(f):(g=typeof globalThis!=='undefined'?globalThis:g||self,g.xlsx2csv=f());})(this,(function(){'use strict';// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
// Some of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var ch2 = {};
var wk = (function (c, id, msg, transfer, cb) {
    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
        c + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
    ], { type: 'text/javascript' }))));
    w.onmessage = function (e) {
        var d = e.data, ed = d.$e$;
        if (ed) {
            var err = new Error(ed[0]);
            err['code'] = ed[1];
            err.stack = ed[2];
            cb(err, null);
        }
        else
            cb(null, d);
    };
    w.postMessage(msg, transfer);
    return w;
});

// aliases for shorter compressed code (most minifers don't do this)
var u8 = Uint8Array, u16 = Uint16Array, u32 = Uint32Array;
// fixed length extra bits
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);
// fixed distance extra bits
// see fleb note
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);
// code length index map
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
// get base, reverse index map from extra bits
var freb = function (eb, start) {
    var b = new u16(31);
    for (var i = 0; i < 31; ++i) {
        b[i] = start += 1 << eb[i - 1];
    }
    // numbers here are at max 18 bits
    var r = new u32(b[30]);
    for (var i = 1; i < 30; ++i) {
        for (var j = b[i]; j < b[i + 1]; ++j) {
            r[j] = ((j - b[i]) << 5) | i;
        }
    }
    return [b, r];
};
var _a = freb(fleb, 2), fl = _a[0], revfl = _a[1];
// we can ignore the fact that the other numbers are wrong; they never happen anyway
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0), fd = _b[0];
// map of value to reverse (assuming 16 bits)
var rev = new u16(32768);
for (var i = 0; i < 32768; ++i) {
    // reverse table algorithm from SO
    var x = ((i & 0xAAAA) >>> 1) | ((i & 0x5555) << 1);
    x = ((x & 0xCCCC) >>> 2) | ((x & 0x3333) << 2);
    x = ((x & 0xF0F0) >>> 4) | ((x & 0x0F0F) << 4);
    rev[i] = (((x & 0xFF00) >>> 8) | ((x & 0x00FF) << 8)) >>> 1;
}
// create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?
var hMap = (function (cd, mb, r) {
    var s = cd.length;
    // index
    var i = 0;
    // u16 "map": index -> # of codes with bit length = index
    var l = new u16(mb);
    // length of cd must be 288 (total # of codes)
    for (; i < s; ++i) {
        if (cd[i])
            ++l[cd[i] - 1];
    }
    // u16 "map": index -> minimum code for bit length = index
    var le = new u16(mb);
    for (i = 0; i < mb; ++i) {
        le[i] = (le[i - 1] + l[i - 1]) << 1;
    }
    var co;
    if (r) {
        // u16 "map": index -> number of actual bits, symbol for code
        co = new u16(1 << mb);
        // bits to remove for reverser
        var rvb = 15 - mb;
        for (i = 0; i < s; ++i) {
            // ignore 0 lengths
            if (cd[i]) {
                // num encoding both symbol and bits read
                var sv = (i << 4) | cd[i];
                // free bits
                var r_1 = mb - cd[i];
                // start value
                var v = le[cd[i] - 1]++ << r_1;
                // m is end value
                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {
                    // every 16 bit value starting with the code yields the same result
                    co[rev[v] >>> rvb] = sv;
                }
            }
        }
    }
    else {
        co = new u16(s);
        for (i = 0; i < s; ++i) {
            if (cd[i]) {
                co[i] = rev[le[cd[i] - 1]++] >>> (15 - cd[i]);
            }
        }
    }
    return co;
});
// fixed length tree
var flt = new u8(288);
for (var i = 0; i < 144; ++i)
    flt[i] = 8;
for (var i = 144; i < 256; ++i)
    flt[i] = 9;
for (var i = 256; i < 280; ++i)
    flt[i] = 7;
for (var i = 280; i < 288; ++i)
    flt[i] = 8;
// fixed distance tree
var fdt = new u8(32);
for (var i = 0; i < 32; ++i)
    fdt[i] = 5;
// fixed length map
var flrm = /*#__PURE__*/ hMap(flt, 9, 1);
// fixed distance map
var fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);
// find max of array
var max = function (a) {
    var m = a[0];
    for (var i = 1; i < a.length; ++i) {
        if (a[i] > m)
            m = a[i];
    }
    return m;
};
// read d, starting at bit p and mask with m
var bits = function (d, p, m) {
    var o = (p / 8) | 0;
    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;
};
// read d, starting at bit p continuing for at least 16 bits
var bits16 = function (d, p) {
    var o = (p / 8) | 0;
    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));
};
// get end of byte
var shft = function (p) { return ((p + 7) / 8) | 0; };
// typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice
var slc = function (v, s, e) {
    if (s == null || s < 0)
        s = 0;
    if (e == null || e > v.length)
        e = v.length;
    // can't use .constructor in case user-supplied
    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);
    n.set(v.subarray(s, e));
    return n;
};
// error codes
var ec = [
    'unexpected EOF',
    'invalid block type',
    'invalid length/literal',
    'invalid distance',
    'stream finished',
    'no stream handler',
    ,
    'no callback',
    'invalid UTF-8 data',
    'extra field too long',
    'date not in range 1980-2099',
    'filename too long',
    'stream finishing',
    'invalid zip data'
    // determined by unknown compression method
];
var err = function (ind, msg, nt) {
    var e = new Error(msg || ec[ind]);
    e.code = ind;
    if (Error.captureStackTrace)
        Error.captureStackTrace(e, err);
    if (!nt)
        throw e;
    return e;
};
// expands raw DEFLATE data
var inflt = function (dat, buf, st) {
    // source length
    var sl = dat.length;
    if (!sl || (st && st.f && !st.l))
        return buf || new u8(0);
    // have to estimate size
    var noBuf = !buf || st;
    // no state
    var noSt = !st || st.i;
    if (!st)
        st = {};
    // Assumes roughly 33% compression ratio average
    if (!buf)
        buf = new u8(sl * 3);
    // ensure buffer can fit at least l elements
    var cbuf = function (l) {
        var bl = buf.length;
        // need to increase size to fit
        if (l > bl) {
            // Double or set to necessary, whichever is greater
            var nbuf = new u8(Math.max(bl * 2, l));
            nbuf.set(buf);
            buf = nbuf;
        }
    };
    //  last chunk         bitpos           bytes
    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
    // total bits
    var tbts = sl * 8;
    do {
        if (!lm) {
            // BFINAL - this is only 1 when last chunk is next
            final = bits(dat, pos, 1);
            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
            var type = bits(dat, pos + 1, 3);
            pos += 3;
            if (!type) {
                // go to end of byte boundary
                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;
                if (t > sl) {
                    if (noSt)
                        err(0);
                    break;
                }
                // ensure size
                if (noBuf)
                    cbuf(bt + l);
                // Copy over uncompressed data
                buf.set(dat.subarray(s, t), bt);
                // Get new bitpos, update byte count
                st.b = bt += l, st.p = pos = t * 8, st.f = final;
                continue;
            }
            else if (type == 1)
                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
            else if (type == 2) {
                //  literal                            lengths
                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
                var tl = hLit + bits(dat, pos + 5, 31) + 1;
                pos += 14;
                // length+distance tree
                var ldt = new u8(tl);
                // code length tree
                var clt = new u8(19);
                for (var i = 0; i < hcLen; ++i) {
                    // use index map to get real code
                    clt[clim[i]] = bits(dat, pos + i * 3, 7);
                }
                pos += hcLen * 3;
                // code lengths bits
                var clb = max(clt), clbmsk = (1 << clb) - 1;
                // code lengths map
                var clm = hMap(clt, clb, 1);
                for (var i = 0; i < tl;) {
                    var r = clm[bits(dat, pos, clbmsk)];
                    // bits read
                    pos += r & 15;
                    // symbol
                    var s = r >>> 4;
                    // code length to copy
                    if (s < 16) {
                        ldt[i++] = s;
                    }
                    else {
                        //  copy   count
                        var c = 0, n = 0;
                        if (s == 16)
                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
                        else if (s == 17)
                            n = 3 + bits(dat, pos, 7), pos += 3;
                        else if (s == 18)
                            n = 11 + bits(dat, pos, 127), pos += 7;
                        while (n--)
                            ldt[i++] = c;
                    }
                }
                //    length tree                 distance tree
                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
                // max length bits
                lbt = max(lt);
                // max dist bits
                dbt = max(dt);
                lm = hMap(lt, lbt, 1);
                dm = hMap(dt, dbt, 1);
            }
            else
                err(1);
            if (pos > tbts) {
                if (noSt)
                    err(0);
                break;
            }
        }
        // Make sure the buffer can hold this + the largest possible addition
        // Maximum chunk size (practically, theoretically infinite) is 2^17;
        if (noBuf)
            cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var lpos = pos;
        for (;; lpos = pos) {
            // bits read, code
            var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
            pos += c & 15;
            if (pos > tbts) {
                if (noSt)
                    err(0);
                break;
            }
            if (!c)
                err(2);
            if (sym < 256)
                buf[bt++] = sym;
            else if (sym == 256) {
                lpos = pos, lm = null;
                break;
            }
            else {
                var add = sym - 254;
                // no extra bits needed if less
                if (sym > 264) {
                    // index
                    var i = sym - 257, b = fleb[i];
                    add = bits(dat, pos, (1 << b) - 1) + fl[i];
                    pos += b;
                }
                // dist
                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
                if (!d)
                    err(3);
                pos += d & 15;
                var dt = fd[dsym];
                if (dsym > 3) {
                    var b = fdeb[dsym];
                    dt += bits16(dat, pos) & ((1 << b) - 1), pos += b;
                }
                if (pos > tbts) {
                    if (noSt)
                        err(0);
                    break;
                }
                if (noBuf)
                    cbuf(bt + 131072);
                var end = bt + add;
                for (; bt < end; bt += 4) {
                    buf[bt] = buf[bt - dt];
                    buf[bt + 1] = buf[bt + 1 - dt];
                    buf[bt + 2] = buf[bt + 2 - dt];
                    buf[bt + 3] = buf[bt + 3 - dt];
                }
                bt = end;
            }
        }
        st.l = lm, st.p = lpos, st.b = bt, st.f = final;
        if (lm)
            final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);
    return bt == buf.length ? buf : slc(buf, 0, bt);
};
// empty
var et = /*#__PURE__*/ new u8(0);
// Walmart object spread
var mrg = function (a, b) {
    var o = {};
    for (var k in a)
        o[k] = a[k];
    for (var k in b)
        o[k] = b[k];
    return o;
};
// worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.
var wcln = function (fn, fnStr, td) {
    var dt = fn();
    var st = fn.toString();
    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\s+/g, '').split(',');
    for (var i = 0; i < dt.length; ++i) {
        var v = dt[i], k = ks[i];
        if (typeof v == 'function') {
            fnStr += ';' + k + '=';
            var st_1 = v.toString();
            if (v.prototype) {
                // for global objects
                if (st_1.indexOf('[native code]') != -1) {
                    var spInd = st_1.indexOf(' ', 8) + 1;
                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));
                }
                else {
                    fnStr += st_1;
                    for (var t in v.prototype)
                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();
                }
            }
            else
                fnStr += st_1;
        }
        else
            td[k] = v;
    }
    return [fnStr, td];
};
var ch = [];
// clone bufs
var cbfs = function (v) {
    var tl = [];
    for (var k in v) {
        if (v[k].buffer) {
            tl.push((v[k] = new v[k].constructor(v[k])).buffer);
        }
    }
    return tl;
};
// use a worker to execute code
var wrkr = function (fns, init, id, cb) {
    var _a;
    if (!ch[id]) {
        var fnStr = '', td_1 = {}, m = fns.length - 1;
        for (var i = 0; i < m; ++i)
            _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];
        ch[id] = wcln(fns[m], fnStr, td_1);
    }
    var td = mrg({}, ch[id][1]);
    return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);
};
// base async inflate fn
var bInflt = function () { return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gu8]; };
// post buf
var pbf = function (msg) { return postMessage(msg, [msg.buffer]); };
// get u8
var gu8 = function (o) { return o && o.size && new u8(o.size); };
// async helper
var cbify = function (dat, opts, fns, init, id, cb) {
    var w = wrkr(fns, init, id, function (err, dat) {
        w.terminate();
        cb(err, dat);
    });
    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);
    return function () { w.terminate(); };
};
// read 2 bytes
var b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };
// read 4 bytes
var b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };
var b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };
function inflate(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        err(7);
    return cbify(data, opts, [
        bInflt
    ], function (ev) { return pbf(inflateSync(ev.data[0], gu8(ev.data[1]))); }, 1, cb);
}
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function inflateSync(data, out) {
    return inflt(data, out);
}
// text decoder
var td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();
// text decoder stream
var tds = 0;
try {
    td.decode(et, { stream: true });
    tds = 1;
}
catch (e) { }
// decode UTF8
var dutf8 = function (d) {
    for (var r = '', i = 0;;) {
        var c = d[i++];
        var eb = (c > 127) + (c > 223) + (c > 239);
        if (i + eb > d.length)
            return [r, slc(d, i - 1)];
        if (!eb)
            r += String.fromCharCode(c);
        else if (eb == 3) {
            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,
                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));
        }
        else if (eb & 1)
            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));
        else
            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));
    }
};
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */
function strFromU8(dat, latin1) {
    if (latin1) {
        var r = '';
        for (var i = 0; i < dat.length; i += 16384)
            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));
        return r;
    }
    else if (td)
        return td.decode(dat);
    else {
        var _a = dutf8(dat), out = _a[0], ext = _a[1];
        if (ext.length)
            err(8);
        return out;
    }
}
// skip local zip header
var slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };
// read zip header
var zh = function (d, b, z) {
    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);
    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];
    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
};
// read zip64 extra field
var z64e = function (d, b) {
    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))
        ;
    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];
};
var mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };
function unzip(data, opts, cb) {
    if (!cb)
        cb = opts, opts = {};
    if (typeof cb != 'function')
        err(7);
    var term = [];
    var tAll = function () {
        for (var i = 0; i < term.length; ++i)
            term[i]();
    };
    var files = {};
    var cbd = function (a, b) {
        mt(function () { cb(a, b); });
    };
    mt(function () { cbd = cb; });
    var e = data.length - 22;
    for (; b4(data, e) != 0x6054B50; --e) {
        if (!e || data.length - e > 65558) {
            cbd(err(13, 0, 1), null);
            return tAll;
        }
    }
    var lft = b2(data, e + 8);
    if (lft) {
        var c = lft;
        var o = b4(data, e + 16);
        var z = o == 4294967295;
        if (z) {
            e = b4(data, e - 12);
            if (b4(data, e) != 0x6064B50) {
                cbd(err(13, 0, 1), null);
                return tAll;
            }
            c = lft = b4(data, e + 32);
            o = b4(data, e + 48);
        }
        var fltr = opts && opts.filter;
        var _loop_3 = function (i) {
            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);
            o = no;
            var cbl = function (e, d) {
                if (e) {
                    tAll();
                    cbd(e, null);
                }
                else {
                    if (d)
                        files[fn] = d;
                    if (!--lft)
                        cbd(null, files);
                }
            };
            if (!fltr || fltr({
                name: fn,
                size: sc,
                originalSize: su,
                compression: c_1
            })) {
                if (!c_1)
                    cbl(null, slc(data, b, b + sc));
                else if (c_1 == 8) {
                    var infl = data.subarray(b, b + sc);
                    if (sc < 320000) {
                        try {
                            cbl(null, inflateSync(infl, new u8(su)));
                        }
                        catch (e) {
                            cbl(e, null);
                        }
                    }
                    else
                        term.push(inflate(infl, { size: su }, cbl));
                }
                else
                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);
            }
            else
                cbl(null, null);
        };
        for (var i = 0; i < c; ++i) {
            _loop_3(i);
        }
    }
    else
        cbd(null, {});
    return tAll;
}function unzipAsync (xlsx) {
   return new Promise((resolve, reject) => {
        unzip(new Uint8Array(xlsx), (err, unzipped) => {
            err ? reject(err) : resolve(unzipped);
        });
   })
}

class Zip {
    constructor(zip) {
        this.zip = zip;
    }

    static async loadAsync(xlsx) {
        const zip = await unzipAsync(xlsx);
        return new Zip(zip)
    }

    async getXML(path) {
        const handle = this.zip[path];
        return handle && strFromU8(handle)
    }

    async close() {
        this.zip = null;
    }
}

function connect(xml, parser, status) {
    const step = 1000;
    let i = 0;
    while (i < xml.length) {
        if (status.stop) {
            break
        }
        const part = xml.slice(i, i + step);
        parser.write(part);
        i += step;
    }
    parser.close();
}

const MAX = 10000;var saxes = {};var ed5$1 = {};(function (exports) {
	/**
	 * Character classes and associated utilities for the 5th edition of XML 1.0.
	 *
	 * @author Louis-Dominique Dubeau
	 * @license MIT
	 * @copyright Louis-Dominique Dubeau
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	//
	// Fragments.
	//
	exports.CHAR = "\t\n\r -\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF";
	exports.S = " \t\r\n";
	// tslint:disable-next-line:max-line-length
	exports.NAME_START_CHAR = ":A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\uD800\uDC00-\uDB7F\uDFFF";
	exports.NAME_CHAR = "-" + exports.NAME_START_CHAR + ".0-9\u00B7\u0300-\u036F\u203F-\u2040";
	//
	// Regular expressions.
	//
	exports.CHAR_RE = new RegExp("^[" + exports.CHAR + "]$", "u");
	exports.S_RE = new RegExp("^[" + exports.S + "]+$", "u");
	exports.NAME_START_CHAR_RE = new RegExp("^[" + exports.NAME_START_CHAR + "]$", "u");
	exports.NAME_CHAR_RE = new RegExp("^[" + exports.NAME_CHAR + "]$", "u");
	exports.NAME_RE = new RegExp("^[" + exports.NAME_START_CHAR + "][" + exports.NAME_CHAR + "]*$", "u");
	exports.NMTOKEN_RE = new RegExp("^[" + exports.NAME_CHAR + "]+$", "u");
	var TAB = 9;
	var NL = 0xA;
	var CR = 0xD;
	var SPACE = 0x20;
	//
	// Lists.
	//
	/** All characters in the ``S`` production. */
	exports.S_LIST = [SPACE, NL, CR, TAB];
	/**
	 * Determines whether a codepoint matches the ``CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``CHAR``.
	 */
	function isChar(c) {
	    return (c >= SPACE && c <= 0xD7FF) ||
	        c === NL || c === CR || c === TAB ||
	        (c >= 0xE000 && c <= 0xFFFD) ||
	        (c >= 0x10000 && c <= 0x10FFFF);
	}
	exports.isChar = isChar;
	/**
	 * Determines whether a codepoint matches the ``S`` (space) production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``S``.
	 */
	function isS(c) {
	    return c === SPACE || c === NL || c === CR || c === TAB;
	}
	exports.isS = isS;
	/**
	 * Determines whether a codepoint matches the ``NAME_START_CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.
	 */
	function isNameStartChar(c) {
	    return ((c >= 0x41 && c <= 0x5A) ||
	        (c >= 0x61 && c <= 0x7A) ||
	        c === 0x3A ||
	        c === 0x5F ||
	        c === 0x200C ||
	        c === 0x200D ||
	        (c >= 0xC0 && c <= 0xD6) ||
	        (c >= 0xD8 && c <= 0xF6) ||
	        (c >= 0x00F8 && c <= 0x02FF) ||
	        (c >= 0x0370 && c <= 0x037D) ||
	        (c >= 0x037F && c <= 0x1FFF) ||
	        (c >= 0x2070 && c <= 0x218F) ||
	        (c >= 0x2C00 && c <= 0x2FEF) ||
	        (c >= 0x3001 && c <= 0xD7FF) ||
	        (c >= 0xF900 && c <= 0xFDCF) ||
	        (c >= 0xFDF0 && c <= 0xFFFD) ||
	        (c >= 0x10000 && c <= 0xEFFFF));
	}
	exports.isNameStartChar = isNameStartChar;
	/**
	 * Determines whether a codepoint matches the ``NAME_CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``NAME_CHAR``.
	 */
	function isNameChar(c) {
	    return isNameStartChar(c) ||
	        (c >= 0x30 && c <= 0x39) ||
	        c === 0x2D ||
	        c === 0x2E ||
	        c === 0xB7 ||
	        (c >= 0x0300 && c <= 0x036F) ||
	        (c >= 0x203F && c <= 0x2040);
	}
	exports.isNameChar = isNameChar;
	
} (ed5$1));var ed2$1 = {};(function (exports) {
	/**
	 * Character classes and associated utilities for the 2nd edition of XML 1.1.
	 *
	 * @author Louis-Dominique Dubeau
	 * @license MIT
	 * @copyright Louis-Dominique Dubeau
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	//
	// Fragments.
	//
	exports.CHAR = "\u0001-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF";
	exports.RESTRICTED_CHAR = "\u0001-\u0008\u000B\u000C\u000E-\u001F\u007F-\u0084\u0086-\u009F";
	exports.S = " \t\r\n";
	// tslint:disable-next-line:max-line-length
	exports.NAME_START_CHAR = ":A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\uD800\uDC00-\uDB7F\uDFFF";
	exports.NAME_CHAR = "-" + exports.NAME_START_CHAR + ".0-9\u00B7\u0300-\u036F\u203F-\u2040";
	//
	// Regular expressions.
	//
	exports.CHAR_RE = new RegExp("^[" + exports.CHAR + "]$", "u");
	exports.RESTRICTED_CHAR_RE = new RegExp("^[" + exports.RESTRICTED_CHAR + "]$", "u");
	exports.S_RE = new RegExp("^[" + exports.S + "]+$", "u");
	exports.NAME_START_CHAR_RE = new RegExp("^[" + exports.NAME_START_CHAR + "]$", "u");
	exports.NAME_CHAR_RE = new RegExp("^[" + exports.NAME_CHAR + "]$", "u");
	exports.NAME_RE = new RegExp("^[" + exports.NAME_START_CHAR + "][" + exports.NAME_CHAR + "]*$", "u");
	exports.NMTOKEN_RE = new RegExp("^[" + exports.NAME_CHAR + "]+$", "u");
	var TAB = 9;
	var NL = 0xA;
	var CR = 0xD;
	var SPACE = 0x20;
	//
	// Lists.
	//
	/** All characters in the ``S`` production. */
	exports.S_LIST = [SPACE, NL, CR, TAB];
	/**
	 * Determines whether a codepoint matches the ``CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``CHAR``.
	 */
	function isChar(c) {
	    return (c >= 0x0001 && c <= 0xD7FF) ||
	        (c >= 0xE000 && c <= 0xFFFD) ||
	        (c >= 0x10000 && c <= 0x10FFFF);
	}
	exports.isChar = isChar;
	/**
	 * Determines whether a codepoint matches the ``RESTRICTED_CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``RESTRICTED_CHAR``.
	 */
	function isRestrictedChar(c) {
	    return (c >= 0x1 && c <= 0x8) ||
	        c === 0xB ||
	        c === 0xC ||
	        (c >= 0xE && c <= 0x1F) ||
	        (c >= 0x7F && c <= 0x84) ||
	        (c >= 0x86 && c <= 0x9F);
	}
	exports.isRestrictedChar = isRestrictedChar;
	/**
	 * Determines whether a codepoint matches the ``CHAR`` production and does not
	 * match the ``RESTRICTED_CHAR`` production. ``isCharAndNotRestricted(x)`` is
	 * equivalent to ``isChar(x) && !isRestrictedChar(x)``. This function is faster
	 * than running the two-call equivalent.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``CHAR`` and does not match
	 * ``RESTRICTED_CHAR``.
	 */
	function isCharAndNotRestricted(c) {
	    return (c === 0x9) ||
	        (c === 0xA) ||
	        (c === 0xD) ||
	        (c > 0x1F && c < 0x7F) ||
	        (c === 0x85) ||
	        (c > 0x9F && c <= 0xD7FF) ||
	        (c >= 0xE000 && c <= 0xFFFD) ||
	        (c >= 0x10000 && c <= 0x10FFFF);
	}
	exports.isCharAndNotRestricted = isCharAndNotRestricted;
	/**
	 * Determines whether a codepoint matches the ``S`` (space) production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``S``.
	 */
	function isS(c) {
	    return c === SPACE || c === NL || c === CR || c === TAB;
	}
	exports.isS = isS;
	/**
	 * Determines whether a codepoint matches the ``NAME_START_CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.
	 */
	// tslint:disable-next-line:cyclomatic-complexity
	function isNameStartChar(c) {
	    return ((c >= 0x41 && c <= 0x5A) ||
	        (c >= 0x61 && c <= 0x7A) ||
	        c === 0x3A ||
	        c === 0x5F ||
	        c === 0x200C ||
	        c === 0x200D ||
	        (c >= 0xC0 && c <= 0xD6) ||
	        (c >= 0xD8 && c <= 0xF6) ||
	        (c >= 0x00F8 && c <= 0x02FF) ||
	        (c >= 0x0370 && c <= 0x037D) ||
	        (c >= 0x037F && c <= 0x1FFF) ||
	        (c >= 0x2070 && c <= 0x218F) ||
	        (c >= 0x2C00 && c <= 0x2FEF) ||
	        (c >= 0x3001 && c <= 0xD7FF) ||
	        (c >= 0xF900 && c <= 0xFDCF) ||
	        (c >= 0xFDF0 && c <= 0xFFFD) ||
	        (c >= 0x10000 && c <= 0xEFFFF));
	}
	exports.isNameStartChar = isNameStartChar;
	/**
	 * Determines whether a codepoint matches the ``NAME_CHAR`` production.
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches ``NAME_CHAR``.
	 */
	function isNameChar(c) {
	    return isNameStartChar(c) ||
	        (c >= 0x30 && c <= 0x39) ||
	        c === 0x2D ||
	        c === 0x2E ||
	        c === 0xB7 ||
	        (c >= 0x0300 && c <= 0x036F) ||
	        (c >= 0x203F && c <= 0x2040);
	}
	exports.isNameChar = isNameChar;
	
} (ed2$1));var ed3 = {};(function (exports) {
	/**
	 * Character class utilities for XML NS 1.0 edition 3.
	 *
	 * @author Louis-Dominique Dubeau
	 * @license MIT
	 * @copyright Louis-Dominique Dubeau
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	//
	// Fragments.
	//
	// tslint:disable-next-line:max-line-length
	exports.NC_NAME_START_CHAR = "A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\uD800\uDC00-\uDB7F\uDFFF";
	exports.NC_NAME_CHAR = "-" + exports.NC_NAME_START_CHAR + ".0-9\u00B7\u0300-\u036F\u203F-\u2040";
	//
	// Regular expressions.
	//
	exports.NC_NAME_START_CHAR_RE = new RegExp("^[" + exports.NC_NAME_START_CHAR + "]$", "u");
	exports.NC_NAME_CHAR_RE = new RegExp("^[" + exports.NC_NAME_CHAR + "]$", "u");
	exports.NC_NAME_RE = new RegExp("^[" + exports.NC_NAME_START_CHAR + "][" + exports.NC_NAME_CHAR + "]*$", "u");
	/**
	 * Determines whether a codepoint matches [[NC_NAME_START_CHAR]].
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches.
	 */
	// tslint:disable-next-line:cyclomatic-complexity
	function isNCNameStartChar(c) {
	    return ((c >= 0x41 && c <= 0x5A) ||
	        c === 0x5F ||
	        (c >= 0x61 && c <= 0x7A) ||
	        (c >= 0xC0 && c <= 0xD6) ||
	        (c >= 0xD8 && c <= 0xF6) ||
	        (c >= 0x00F8 && c <= 0x02FF) ||
	        (c >= 0x0370 && c <= 0x037D) ||
	        (c >= 0x037F && c <= 0x1FFF) ||
	        (c >= 0x200C && c <= 0x200D) ||
	        (c >= 0x2070 && c <= 0x218F) ||
	        (c >= 0x2C00 && c <= 0x2FEF) ||
	        (c >= 0x3001 && c <= 0xD7FF) ||
	        (c >= 0xF900 && c <= 0xFDCF) ||
	        (c >= 0xFDF0 && c <= 0xFFFD) ||
	        (c >= 0x10000 && c <= 0xEFFFF));
	}
	exports.isNCNameStartChar = isNCNameStartChar;
	/**
	 * Determines whether a codepoint matches [[NC_NAME_CHAR]].
	 *
	 * @param c The code point.
	 *
	 * @returns ``true`` if the codepoint matches.
	 */
	function isNCNameChar(c) {
	    return isNCNameStartChar(c) ||
	        (c === 0x2D ||
	            c === 0x2E ||
	            (c >= 0x30 && c <= 0x39) ||
	            c === 0x00B7 ||
	            (c >= 0x0300 && c <= 0x036F) ||
	            (c >= 0x203F && c <= 0x2040));
	}
	exports.isNCNameChar = isNCNameChar;
	
} (ed3));Object.defineProperty(saxes, "__esModule", { value: true });
var SaxesParser_1 = saxes.SaxesParser = saxes.EVENTS = void 0;
const ed5 = ed5$1;
const ed2 = ed2$1;
const NSed3 = ed3;
var isS = ed5.isS;
var isChar10 = ed5.isChar;
var isNameStartChar = ed5.isNameStartChar;
var isNameChar = ed5.isNameChar;
var S_LIST = ed5.S_LIST;
var NAME_RE = ed5.NAME_RE;
var isChar11 = ed2.isChar;
var isNCNameStartChar = NSed3.isNCNameStartChar;
var isNCNameChar = NSed3.isNCNameChar;
var NC_NAME_RE = NSed3.NC_NAME_RE;
const XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
const XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
const rootNS = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
    __proto__: null,
    xml: XML_NAMESPACE,
    xmlns: XMLNS_NAMESPACE,
};
const XML_ENTITIES = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
    __proto__: null,
    amp: "&",
    gt: ">",
    lt: "<",
    quot: "\"",
    apos: "'",
};
// EOC: end-of-chunk
const EOC = -1;
const NL_LIKE = -2;
const S_BEGIN = 0; // Initial state.
const S_BEGIN_WHITESPACE = 1; // leading whitespace
const S_DOCTYPE = 2; // <!DOCTYPE
const S_DOCTYPE_QUOTE = 3; // <!DOCTYPE "//blah
const S_DTD = 4; // <!DOCTYPE "//blah" [ ...
const S_DTD_QUOTED = 5; // <!DOCTYPE "//blah" [ "foo
const S_DTD_OPEN_WAKA = 6;
const S_DTD_OPEN_WAKA_BANG = 7;
const S_DTD_COMMENT = 8; // <!--
const S_DTD_COMMENT_ENDING = 9; // <!-- blah -
const S_DTD_COMMENT_ENDED = 10; // <!-- blah --
const S_DTD_PI = 11; // <?
const S_DTD_PI_ENDING = 12; // <?hi "there" ?
const S_TEXT = 13; // general stuff
const S_ENTITY = 14; // &amp and such
const S_OPEN_WAKA = 15; // <
const S_OPEN_WAKA_BANG = 16; // <!...
const S_COMMENT = 17; // <!--
const S_COMMENT_ENDING = 18; // <!-- blah -
const S_COMMENT_ENDED = 19; // <!-- blah --
const S_CDATA = 20; // <![CDATA[ something
const S_CDATA_ENDING = 21; // ]
const S_CDATA_ENDING_2 = 22; // ]]
const S_PI_FIRST_CHAR = 23; // <?hi, first char
const S_PI_REST = 24; // <?hi, rest of the name
const S_PI_BODY = 25; // <?hi there
const S_PI_ENDING = 26; // <?hi "there" ?
const S_XML_DECL_NAME_START = 27; // <?xml
const S_XML_DECL_NAME = 28; // <?xml foo
const S_XML_DECL_EQ = 29; // <?xml foo=
const S_XML_DECL_VALUE_START = 30; // <?xml foo=
const S_XML_DECL_VALUE = 31; // <?xml foo="bar"
const S_XML_DECL_SEPARATOR = 32; // <?xml foo="bar"
const S_XML_DECL_ENDING = 33; // <?xml ... ?
const S_OPEN_TAG = 34; // <strong
const S_OPEN_TAG_SLASH = 35; // <strong /
const S_ATTRIB = 36; // <a
const S_ATTRIB_NAME = 37; // <a foo
const S_ATTRIB_NAME_SAW_WHITE = 38; // <a foo _
const S_ATTRIB_VALUE = 39; // <a foo=
const S_ATTRIB_VALUE_QUOTED = 40; // <a foo="bar
const S_ATTRIB_VALUE_CLOSED = 41; // <a foo="bar"
const S_ATTRIB_VALUE_UNQUOTED = 42; // <a foo=bar
const S_CLOSE_TAG = 43; // </a
const S_CLOSE_TAG_SAW_WHITE = 44; // </a   >
const TAB = 9;
const NL = 0xA;
const CR = 0xD;
const SPACE = 0x20;
const BANG = 0x21;
const DQUOTE = 0x22;
const AMP = 0x26;
const SQUOTE = 0x27;
const MINUS = 0x2D;
const FORWARD_SLASH = 0x2F;
const SEMICOLON = 0x3B;
const LESS = 0x3C;
const EQUAL = 0x3D;
const GREATER = 0x3E;
const QUESTION = 0x3F;
const OPEN_BRACKET = 0x5B;
const CLOSE_BRACKET = 0x5D;
const NEL = 0x85;
const LS = 0x2028; // Line Separator
const isQuote = (c) => c === DQUOTE || c === SQUOTE;
const QUOTES = [DQUOTE, SQUOTE];
const DOCTYPE_TERMINATOR = [...QUOTES, OPEN_BRACKET, GREATER];
const DTD_TERMINATOR = [...QUOTES, LESS, CLOSE_BRACKET];
const XML_DECL_NAME_TERMINATOR = [EQUAL, QUESTION, ...S_LIST];
const ATTRIB_VALUE_UNQUOTED_TERMINATOR = [...S_LIST, GREATER, AMP, LESS];
function nsPairCheck(parser, prefix, uri) {
    switch (prefix) {
        case "xml":
            if (uri !== XML_NAMESPACE) {
                parser.fail(`xml prefix must be bound to ${XML_NAMESPACE}.`);
            }
            break;
        case "xmlns":
            if (uri !== XMLNS_NAMESPACE) {
                parser.fail(`xmlns prefix must be bound to ${XMLNS_NAMESPACE}.`);
            }
            break;
    }
    switch (uri) {
        case XMLNS_NAMESPACE:
            parser.fail(prefix === "" ?
                `the default namespace may not be set to ${uri}.` :
                `may not assign a prefix (even "xmlns") to the URI \
${XMLNS_NAMESPACE}.`);
            break;
        case XML_NAMESPACE:
            switch (prefix) {
                case "xml":
                    // Assinging the XML namespace to "xml" is fine.
                    break;
                case "":
                    parser.fail(`the default namespace may not be set to ${uri}.`);
                    break;
                default:
                    parser.fail("may not assign the xml namespace to another prefix.");
            }
            break;
    }
}
function nsMappingCheck(parser, mapping) {
    for (const local of Object.keys(mapping)) {
        nsPairCheck(parser, local, mapping[local]);
    }
}
const isNCName = (name) => NC_NAME_RE.test(name);
const isName = (name) => NAME_RE.test(name);
const FORBIDDEN_START = 0;
const FORBIDDEN_BRACKET = 1;
const FORBIDDEN_BRACKET_BRACKET = 2;
/**
 * The list of supported events.
 */
saxes.EVENTS = [
    "xmldecl",
    "text",
    "processinginstruction",
    "doctype",
    "comment",
    "opentagstart",
    "attribute",
    "opentag",
    "closetag",
    "cdata",
    "error",
    "end",
    "ready",
];
const EVENT_NAME_TO_HANDLER_NAME = {
    xmldecl: "xmldeclHandler",
    text: "textHandler",
    processinginstruction: "piHandler",
    doctype: "doctypeHandler",
    comment: "commentHandler",
    opentagstart: "openTagStartHandler",
    attribute: "attributeHandler",
    opentag: "openTagHandler",
    closetag: "closeTagHandler",
    cdata: "cdataHandler",
    error: "errorHandler",
    end: "endHandler",
    ready: "readyHandler",
};
// eslint-disable-next-line @typescript-eslint/ban-types
class SaxesParser {
    /**
     * @param opt The parser options.
     */
    constructor(opt) {
        this.opt = opt !== null && opt !== void 0 ? opt : {};
        this.fragmentOpt = !!this.opt.fragment;
        const xmlnsOpt = this.xmlnsOpt = !!this.opt.xmlns;
        this.trackPosition = this.opt.position !== false;
        this.fileName = this.opt.fileName;
        if (xmlnsOpt) {
            // This is the function we use to perform name checks on PIs and entities.
            // When namespaces are used, colons are not allowed in PI target names or
            // entity names. So the check depends on whether namespaces are used. See:
            //
            // https://www.w3.org/XML/xml-names-19990114-errata.html
            // NE08
            //
            this.nameStartCheck = isNCNameStartChar;
            this.nameCheck = isNCNameChar;
            this.isName = isNCName;
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.processAttribs = this.processAttribsNS;
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.pushAttrib = this.pushAttribNS;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
            this.ns = Object.assign({ __proto__: null }, rootNS);
            const additional = this.opt.additionalNamespaces;
            if (additional != null) {
                nsMappingCheck(this, additional);
                Object.assign(this.ns, additional);
            }
        }
        else {
            this.nameStartCheck = isNameStartChar;
            this.nameCheck = isNameChar;
            this.isName = isName;
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.processAttribs = this.processAttribsPlain;
            // eslint-disable-next-line @typescript-eslint/unbound-method
            this.pushAttrib = this.pushAttribPlain;
        }
        //
        // The order of the members in this table needs to correspond to the state
        // numbers given to the states that correspond to the methods being recorded
        // here.
        //
        this.stateTable = [
            /* eslint-disable @typescript-eslint/unbound-method */
            this.sBegin,
            this.sBeginWhitespace,
            this.sDoctype,
            this.sDoctypeQuote,
            this.sDTD,
            this.sDTDQuoted,
            this.sDTDOpenWaka,
            this.sDTDOpenWakaBang,
            this.sDTDComment,
            this.sDTDCommentEnding,
            this.sDTDCommentEnded,
            this.sDTDPI,
            this.sDTDPIEnding,
            this.sText,
            this.sEntity,
            this.sOpenWaka,
            this.sOpenWakaBang,
            this.sComment,
            this.sCommentEnding,
            this.sCommentEnded,
            this.sCData,
            this.sCDataEnding,
            this.sCDataEnding2,
            this.sPIFirstChar,
            this.sPIRest,
            this.sPIBody,
            this.sPIEnding,
            this.sXMLDeclNameStart,
            this.sXMLDeclName,
            this.sXMLDeclEq,
            this.sXMLDeclValueStart,
            this.sXMLDeclValue,
            this.sXMLDeclSeparator,
            this.sXMLDeclEnding,
            this.sOpenTag,
            this.sOpenTagSlash,
            this.sAttrib,
            this.sAttribName,
            this.sAttribNameSawWhite,
            this.sAttribValue,
            this.sAttribValueQuoted,
            this.sAttribValueClosed,
            this.sAttribValueUnquoted,
            this.sCloseTag,
            this.sCloseTagSawWhite,
            /* eslint-enable @typescript-eslint/unbound-method */
        ];
        this._init();
    }
    /**
     * Indicates whether or not the parser is closed. If ``true``, wait for
     * the ``ready`` event to write again.
     */
    get closed() {
        return this._closed;
    }
    _init() {
        var _a;
        this.openWakaBang = "";
        this.text = "";
        this.name = "";
        this.piTarget = "";
        this.entity = "";
        this.q = null;
        this.tags = [];
        this.tag = null;
        this.topNS = null;
        this.chunk = "";
        this.chunkPosition = 0;
        this.i = 0;
        this.prevI = 0;
        this.carriedFromPrevious = undefined;
        this.forbiddenState = FORBIDDEN_START;
        this.attribList = [];
        // The logic is organized so as to minimize the need to check
        // this.opt.fragment while parsing.
        const { fragmentOpt } = this;
        this.state = fragmentOpt ? S_TEXT : S_BEGIN;
        // We want these to be all true if we are dealing with a fragment.
        this.reportedTextBeforeRoot = this.reportedTextAfterRoot = this.closedRoot =
            this.sawRoot = fragmentOpt;
        // An XML declaration is intially possible only when parsing whole
        // documents.
        this.xmlDeclPossible = !fragmentOpt;
        this.xmlDeclExpects = ["version"];
        this.entityReturnState = undefined;
        let { defaultXMLVersion } = this.opt;
        if (defaultXMLVersion === undefined) {
            if (this.opt.forceXMLVersion === true) {
                throw new Error("forceXMLVersion set but defaultXMLVersion is not set");
            }
            defaultXMLVersion = "1.0";
        }
        this.setXMLVersion(defaultXMLVersion);
        this.positionAtNewLine = 0;
        this.doctype = false;
        this._closed = false;
        this.xmlDecl = {
            version: undefined,
            encoding: undefined,
            standalone: undefined,
        };
        this.line = 1;
        this.column = 0;
        this.ENTITIES = Object.create(XML_ENTITIES);
        (_a = this.readyHandler) === null || _a === void 0 ? void 0 : _a.call(this);
    }
    /**
     * The stream position the parser is currently looking at. This field is
     * zero-based.
     *
     * This field is not based on counting Unicode characters but is to be
     * interpreted as a plain index into a JavaScript string.
     */
    get position() {
        return this.chunkPosition + this.i;
    }
    /**
     * The column number of the next character to be read by the parser.  *
     * This field is zero-based. (The first column in a line is 0.)
     *
     * This field reports the index at which the next character would be in the
     * line if the line were represented as a JavaScript string.  Note that this
     * *can* be different to a count based on the number of *Unicode characters*
     * due to how JavaScript handles astral plane characters.
     *
     * See [[column]] for a number that corresponds to a count of Unicode
     * characters.
     */
    get columnIndex() {
        return this.position - this.positionAtNewLine;
    }
    /**
     * Set an event listener on an event. The parser supports one handler per
     * event type. If you try to set an event handler over an existing handler,
     * the old handler is silently overwritten.
     *
     * @param name The event to listen to.
     *
     * @param handler The handler to set.
     */
    on(name, handler) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
        this[EVENT_NAME_TO_HANDLER_NAME[name]] = handler;
    }
    /**
     * Unset an event handler.
     *
     * @parma name The event to stop listening to.
     */
    off(name) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
        this[EVENT_NAME_TO_HANDLER_NAME[name]] = undefined;
    }
    /**
     * Make an error object. The error object will have a message that contains
     * the ``fileName`` option passed at the creation of the parser. If position
     * tracking was turned on, it will also have line and column number
     * information.
     *
     * @param message The message describing the error to report.
     *
     * @returns An error object with a properly formatted message.
     */
    makeError(message) {
        var _a;
        let msg = (_a = this.fileName) !== null && _a !== void 0 ? _a : "";
        if (this.trackPosition) {
            if (msg.length > 0) {
                msg += ":";
            }
            msg += `${this.line}:${this.column}`;
        }
        if (msg.length > 0) {
            msg += ": ";
        }
        return new Error(msg + message);
    }
    /**
     * Report a parsing error. This method is made public so that client code may
     * check for issues that are outside the scope of this project and can report
     * errors.
     *
     * @param message The error to report.
     *
     * @returns this
     */
    fail(message) {
        const err = this.makeError(message);
        const handler = this.errorHandler;
        if (handler === undefined) {
            throw err;
        }
        else {
            handler(err);
        }
        return this;
    }
    /**
     * Write a XML data to the parser.
     *
     * @param chunk The XML data to write.
     *
     * @returns this
     */
    // We do need object for the type here. Yes, it often causes problems
    // but not in this case.
    write(chunk) {
        if (this.closed) {
            return this.fail("cannot write after close; assign an onready handler.");
        }
        let end = false;
        if (chunk === null) {
            // We cannot return immediately because carriedFromPrevious may need
            // processing.
            end = true;
            chunk = "";
        }
        else if (typeof chunk === "object") {
            chunk = chunk.toString();
        }
        // We checked if performing a pre-decomposition of the string into an array
        // of single complete characters (``Array.from(chunk)``) would be faster
        // than the current repeated calls to ``charCodeAt``. As of August 2018, it
        // isn't. (There may be Node-specific code that would perform faster than
        // ``Array.from`` but don't want to be dependent on Node.)
        if (this.carriedFromPrevious !== undefined) {
            // The previous chunk had char we must carry over.
            chunk = `${this.carriedFromPrevious}${chunk}`;
            this.carriedFromPrevious = undefined;
        }
        let limit = chunk.length;
        const lastCode = chunk.charCodeAt(limit - 1);
        if (!end &&
            // A trailing CR or surrogate must be carried over to the next
            // chunk.
            (lastCode === CR || (lastCode >= 0xD800 && lastCode <= 0xDBFF))) {
            // The chunk ends with a character that must be carried over. We cannot
            // know how to handle it until we get the next chunk or the end of the
            // stream. So save it for later.
            this.carriedFromPrevious = chunk[limit - 1];
            limit--;
            chunk = chunk.slice(0, limit);
        }
        const { stateTable } = this;
        this.chunk = chunk;
        this.i = 0;
        while (this.i < limit) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
            stateTable[this.state].call(this);
        }
        this.chunkPosition += limit;
        return end ? this.end() : this;
    }
    /**
     * Close the current stream. Perform final well-formedness checks and reset
     * the parser tstate.
     *
     * @returns this
     */
    close() {
        return this.write(null);
    }
    /**
     * Get a single code point out of the current chunk. This updates the current
     * position if we do position tracking.
     *
     * This is the algorithm to use for XML 1.0.
     *
     * @returns The character read.
     */
    getCode10() {
        const { chunk, i } = this;
        this.prevI = i;
        // Yes, we do this instead of doing this.i++. Doing it this way, we do not
        // read this.i again, which is a bit faster.
        this.i = i + 1;
        if (i >= chunk.length) {
            return EOC;
        }
        // Using charCodeAt and handling the surrogates ourselves is faster
        // than using codePointAt.
        const code = chunk.charCodeAt(i);
        this.column++;
        if (code < 0xD800) {
            if (code >= SPACE || code === TAB) {
                return code;
            }
            switch (code) {
                case NL:
                    this.line++;
                    this.column = 0;
                    this.positionAtNewLine = this.position;
                    return NL;
                case CR:
                    // We may get NaN if we read past the end of the chunk, which is fine.
                    if (chunk.charCodeAt(i + 1) === NL) {
                        // A \r\n sequence is converted to \n so we have to skip over the
                        // next character. We already know it has a size of 1 so ++ is fine
                        // here.
                        this.i = i + 2;
                    }
                    // Otherwise, a \r is just converted to \n, so we don't have to skip
                    // ahead.
                    // In either case, \r becomes \n.
                    this.line++;
                    this.column = 0;
                    this.positionAtNewLine = this.position;
                    return NL_LIKE;
                default:
                    // If we get here, then code < SPACE and it is not NL CR or TAB.
                    this.fail("disallowed character.");
                    return code;
            }
        }
        if (code > 0xDBFF) {
            // This is a specialized version of isChar10 that takes into account
            // that in this context code > 0xDBFF and code <= 0xFFFF. So it does not
            // test cases that don't need testing.
            if (!(code >= 0xE000 && code <= 0xFFFD)) {
                this.fail("disallowed character.");
            }
            return code;
        }
        const final = 0x10000 + ((code - 0xD800) * 0x400) +
            (chunk.charCodeAt(i + 1) - 0xDC00);
        this.i = i + 2;
        // This is a specialized version of isChar10 that takes into account that in
        // this context necessarily final >= 0x10000.
        if (final > 0x10FFFF) {
            this.fail("disallowed character.");
        }
        return final;
    }
    /**
     * Get a single code point out of the current chunk. This updates the current
     * position if we do position tracking.
     *
     * This is the algorithm to use for XML 1.1.
     *
     * @returns {number} The character read.
     */
    getCode11() {
        const { chunk, i } = this;
        this.prevI = i;
        // Yes, we do this instead of doing this.i++. Doing it this way, we do not
        // read this.i again, which is a bit faster.
        this.i = i + 1;
        if (i >= chunk.length) {
            return EOC;
        }
        // Using charCodeAt and handling the surrogates ourselves is faster
        // than using codePointAt.
        const code = chunk.charCodeAt(i);
        this.column++;
        if (code < 0xD800) {
            if ((code > 0x1F && code < 0x7F) || (code > 0x9F && code !== LS) ||
                code === TAB) {
                return code;
            }
            switch (code) {
                case NL: // 0xA
                    this.line++;
                    this.column = 0;
                    this.positionAtNewLine = this.position;
                    return NL;
                case CR: { // 0xD
                    // We may get NaN if we read past the end of the chunk, which is
                    // fine.
                    const next = chunk.charCodeAt(i + 1);
                    if (next === NL || next === NEL) {
                        // A CR NL or CR NEL sequence is converted to NL so we have to skip
                        // over the next character. We already know it has a size of 1.
                        this.i = i + 2;
                    }
                    // Otherwise, a CR is just converted to NL, no skip.
                }
                /* yes, fall through */
                case NEL: // 0x85
                case LS: // Ox2028
                    this.line++;
                    this.column = 0;
                    this.positionAtNewLine = this.position;
                    return NL_LIKE;
                default:
                    this.fail("disallowed character.");
                    return code;
            }
        }
        if (code > 0xDBFF) {
            // This is a specialized version of isCharAndNotRestricted that takes into
            // account that in this context code > 0xDBFF and code <= 0xFFFF. So it
            // does not test cases that don't need testing.
            if (!(code >= 0xE000 && code <= 0xFFFD)) {
                this.fail("disallowed character.");
            }
            return code;
        }
        const final = 0x10000 + ((code - 0xD800) * 0x400) +
            (chunk.charCodeAt(i + 1) - 0xDC00);
        this.i = i + 2;
        // This is a specialized version of isCharAndNotRestricted that takes into
        // account that in this context necessarily final >= 0x10000.
        if (final > 0x10FFFF) {
            this.fail("disallowed character.");
        }
        return final;
    }
    /**
     * Like ``getCode`` but with the return value normalized so that ``NL`` is
     * returned for ``NL_LIKE``.
     */
    getCodeNorm() {
        const c = this.getCode();
        return c === NL_LIKE ? NL : c;
    }
    unget() {
        this.i = this.prevI;
        this.column--;
    }
    /**
     * Capture characters into a buffer until encountering one of a set of
     * characters.
     *
     * @param chars An array of codepoints. Encountering a character in the array
     * ends the capture. (``chars`` may safely contain ``NL``.)
     *
     * @return The character code that made the capture end, or ``EOC`` if we hit
     * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
     * instead.
     */
    captureTo(chars) {
        let { i: start } = this;
        const { chunk } = this;
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const c = this.getCode();
            const isNLLike = c === NL_LIKE;
            const final = isNLLike ? NL : c;
            if (final === EOC || chars.includes(final)) {
                this.text += chunk.slice(start, this.prevI);
                return final;
            }
            if (isNLLike) {
                this.text += `${chunk.slice(start, this.prevI)}\n`;
                start = this.i;
            }
        }
    }
    /**
     * Capture characters into a buffer until encountering a character.
     *
     * @param char The codepoint that ends the capture. **NOTE ``char`` MAY NOT
     * CONTAIN ``NL``.** Passing ``NL`` will result in buggy behavior.
     *
     * @return ``true`` if we ran into the character. Otherwise, we ran into the
     * end of the current chunk.
     */
    captureToChar(char) {
        let { i: start } = this;
        const { chunk } = this;
        // eslint-disable-next-line no-constant-condition
        while (true) {
            let c = this.getCode();
            switch (c) {
                case NL_LIKE:
                    this.text += `${chunk.slice(start, this.prevI)}\n`;
                    start = this.i;
                    c = NL;
                    break;
                case EOC:
                    this.text += chunk.slice(start);
                    return false;
            }
            if (c === char) {
                this.text += chunk.slice(start, this.prevI);
                return true;
            }
        }
    }
    /**
     * Capture characters that satisfy ``isNameChar`` into the ``name`` field of
     * this parser.
     *
     * @return The character code that made the test fail, or ``EOC`` if we hit
     * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
     * instead.
     */
    captureNameChars() {
        const { chunk, i: start } = this;
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const c = this.getCode();
            if (c === EOC) {
                this.name += chunk.slice(start);
                return EOC;
            }
            // NL is not a name char so we don't have to test specifically for it.
            if (!isNameChar(c)) {
                this.name += chunk.slice(start, this.prevI);
                return c === NL_LIKE ? NL : c;
            }
        }
    }
    /**
     * Skip white spaces.
     *
     * @return The character that ended the skip, or ``EOC`` if we hit
     * the end of the chunk. The return value cannot be NL_LIKE: NL is returned
     * instead.
     */
    skipSpaces() {
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const c = this.getCodeNorm();
            if (c === EOC || !isS(c)) {
                return c;
            }
        }
    }
    setXMLVersion(version) {
        this.currentXMLVersion = version;
        /*  eslint-disable @typescript-eslint/unbound-method */
        if (version === "1.0") {
            this.isChar = isChar10;
            this.getCode = this.getCode10;
        }
        else {
            this.isChar = isChar11;
            this.getCode = this.getCode11;
        }
        /* eslint-enable @typescript-eslint/unbound-method */
    }
    // STATE ENGINE METHODS
    // This needs to be a state separate from S_BEGIN_WHITESPACE because we want
    // to be sure never to come back to this state later.
    sBegin() {
        // We are essentially peeking at the first character of the chunk. Since
        // S_BEGIN can be in effect only when we start working on the first chunk,
        // the index at which we must look is necessarily 0. Note also that the
        // following test does not depend on decoding surrogates.
        // If the initial character is 0xFEFF, ignore it.
        if (this.chunk.charCodeAt(0) === 0xFEFF) {
            this.i++;
            this.column++;
        }
        this.state = S_BEGIN_WHITESPACE;
    }
    sBeginWhitespace() {
        // We need to know whether we've encountered spaces or not because as soon
        // as we run into a space, an XML declaration is no longer possible. Rather
        // than slow down skipSpaces even in places where we don't care whether it
        // skipped anything or not, we check whether prevI is equal to the value of
        // i from before we skip spaces.
        const iBefore = this.i;
        const c = this.skipSpaces();
        if (this.prevI !== iBefore) {
            this.xmlDeclPossible = false;
        }
        switch (c) {
            case LESS:
                this.state = S_OPEN_WAKA;
                // We could naively call closeText but in this state, it is not normal
                // to have text be filled with any data.
                if (this.text.length !== 0) {
                    throw new Error("no-empty text at start");
                }
                break;
            case EOC:
                break;
            default:
                this.unget();
                this.state = S_TEXT;
                this.xmlDeclPossible = false;
        }
    }
    sDoctype() {
        var _a;
        const c = this.captureTo(DOCTYPE_TERMINATOR);
        switch (c) {
            case GREATER: {
                (_a = this.doctypeHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
                this.text = "";
                this.state = S_TEXT;
                this.doctype = true; // just remember that we saw it.
                break;
            }
            case EOC:
                break;
            default:
                this.text += String.fromCodePoint(c);
                if (c === OPEN_BRACKET) {
                    this.state = S_DTD;
                }
                else if (isQuote(c)) {
                    this.state = S_DOCTYPE_QUOTE;
                    this.q = c;
                }
        }
    }
    sDoctypeQuote() {
        const q = this.q;
        if (this.captureToChar(q)) {
            this.text += String.fromCodePoint(q);
            this.q = null;
            this.state = S_DOCTYPE;
        }
    }
    sDTD() {
        const c = this.captureTo(DTD_TERMINATOR);
        if (c === EOC) {
            return;
        }
        this.text += String.fromCodePoint(c);
        if (c === CLOSE_BRACKET) {
            this.state = S_DOCTYPE;
        }
        else if (c === LESS) {
            this.state = S_DTD_OPEN_WAKA;
        }
        else if (isQuote(c)) {
            this.state = S_DTD_QUOTED;
            this.q = c;
        }
    }
    sDTDQuoted() {
        const q = this.q;
        if (this.captureToChar(q)) {
            this.text += String.fromCodePoint(q);
            this.state = S_DTD;
            this.q = null;
        }
    }
    sDTDOpenWaka() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        switch (c) {
            case BANG:
                this.state = S_DTD_OPEN_WAKA_BANG;
                this.openWakaBang = "";
                break;
            case QUESTION:
                this.state = S_DTD_PI;
                break;
            default:
                this.state = S_DTD;
        }
    }
    sDTDOpenWakaBang() {
        const char = String.fromCodePoint(this.getCodeNorm());
        const owb = this.openWakaBang += char;
        this.text += char;
        if (owb !== "-") {
            this.state = owb === "--" ? S_DTD_COMMENT : S_DTD;
            this.openWakaBang = "";
        }
    }
    sDTDComment() {
        if (this.captureToChar(MINUS)) {
            this.text += "-";
            this.state = S_DTD_COMMENT_ENDING;
        }
    }
    sDTDCommentEnding() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        this.state = c === MINUS ? S_DTD_COMMENT_ENDED : S_DTD_COMMENT;
    }
    sDTDCommentEnded() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        if (c === GREATER) {
            this.state = S_DTD;
        }
        else {
            this.fail("malformed comment.");
            // <!-- blah -- bloo --> will be recorded as
            // a comment of " blah -- bloo "
            this.state = S_DTD_COMMENT;
        }
    }
    sDTDPI() {
        if (this.captureToChar(QUESTION)) {
            this.text += "?";
            this.state = S_DTD_PI_ENDING;
        }
    }
    sDTDPIEnding() {
        const c = this.getCodeNorm();
        this.text += String.fromCodePoint(c);
        if (c === GREATER) {
            this.state = S_DTD;
        }
    }
    sText() {
        //
        // We did try a version of saxes where the S_TEXT state was split in two
        // states: one for text inside the root element, and one for text
        // outside. This was avoiding having to test this.tags.length to decide
        // what implementation to actually use.
        //
        // Peformance testing on gigabyte-size files did not show any advantage to
        // using the two states solution instead of the current one. Conversely, it
        // made the code a bit more complicated elsewhere. For instance, a comment
        // can appear before the root element so when a comment ended it was
        // necessary to determine whether to return to the S_TEXT state or to the
        // new text-outside-root state.
        //
        if (this.tags.length !== 0) {
            this.handleTextInRoot();
        }
        else {
            this.handleTextOutsideRoot();
        }
    }
    sEntity() {
        // This is essentially a specialized version of captureToChar(SEMICOLON...)
        let { i: start } = this;
        const { chunk } = this;
        // eslint-disable-next-line no-labels, no-restricted-syntax
        loop: 
        // eslint-disable-next-line no-constant-condition
        while (true) {
            switch (this.getCode()) {
                case NL_LIKE:
                    this.entity += `${chunk.slice(start, this.prevI)}\n`;
                    start = this.i;
                    break;
                case SEMICOLON: {
                    const { entityReturnState } = this;
                    const entity = this.entity + chunk.slice(start, this.prevI);
                    this.state = entityReturnState;
                    let parsed;
                    if (entity === "") {
                        this.fail("empty entity name.");
                        parsed = "&;";
                    }
                    else {
                        parsed = this.parseEntity(entity);
                        this.entity = "";
                    }
                    if (entityReturnState !== S_TEXT || this.textHandler !== undefined) {
                        this.text += parsed;
                    }
                    // eslint-disable-next-line no-labels
                    break loop;
                }
                case EOC:
                    this.entity += chunk.slice(start);
                    // eslint-disable-next-line no-labels
                    break loop;
            }
        }
    }
    sOpenWaka() {
        // Reminder: a state handler is called with at least one character
        // available in the current chunk. So the first call to get code inside of
        // a state handler cannot return ``EOC``. That's why we don't test
        // for it.
        const c = this.getCode();
        // either a /, ?, !, or text is coming next.
        if (isNameStartChar(c)) {
            this.state = S_OPEN_TAG;
            this.unget();
            this.xmlDeclPossible = false;
        }
        else {
            switch (c) {
                case FORWARD_SLASH:
                    this.state = S_CLOSE_TAG;
                    this.xmlDeclPossible = false;
                    break;
                case BANG:
                    this.state = S_OPEN_WAKA_BANG;
                    this.openWakaBang = "";
                    this.xmlDeclPossible = false;
                    break;
                case QUESTION:
                    this.state = S_PI_FIRST_CHAR;
                    break;
                default:
                    this.fail("disallowed character in tag name");
                    this.state = S_TEXT;
                    this.xmlDeclPossible = false;
            }
        }
    }
    sOpenWakaBang() {
        this.openWakaBang += String.fromCodePoint(this.getCodeNorm());
        switch (this.openWakaBang) {
            case "[CDATA[":
                if (!this.sawRoot && !this.reportedTextBeforeRoot) {
                    this.fail("text data outside of root node.");
                    this.reportedTextBeforeRoot = true;
                }
                if (this.closedRoot && !this.reportedTextAfterRoot) {
                    this.fail("text data outside of root node.");
                    this.reportedTextAfterRoot = true;
                }
                this.state = S_CDATA;
                this.openWakaBang = "";
                break;
            case "--":
                this.state = S_COMMENT;
                this.openWakaBang = "";
                break;
            case "DOCTYPE":
                this.state = S_DOCTYPE;
                if (this.doctype || this.sawRoot) {
                    this.fail("inappropriately located doctype declaration.");
                }
                this.openWakaBang = "";
                break;
            default:
                // 7 happens to be the maximum length of the string that can possibly
                // match one of the cases above.
                if (this.openWakaBang.length >= 7) {
                    this.fail("incorrect syntax.");
                }
        }
    }
    sComment() {
        if (this.captureToChar(MINUS)) {
            this.state = S_COMMENT_ENDING;
        }
    }
    sCommentEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === MINUS) {
            this.state = S_COMMENT_ENDED;
            (_a = this.commentHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
            this.text = "";
        }
        else {
            this.text += `-${String.fromCodePoint(c)}`;
            this.state = S_COMMENT;
        }
    }
    sCommentEnded() {
        const c = this.getCodeNorm();
        if (c !== GREATER) {
            this.fail("malformed comment.");
            // <!-- blah -- bloo --> will be recorded as
            // a comment of " blah -- bloo "
            this.text += `--${String.fromCodePoint(c)}`;
            this.state = S_COMMENT;
        }
        else {
            this.state = S_TEXT;
        }
    }
    sCData() {
        if (this.captureToChar(CLOSE_BRACKET)) {
            this.state = S_CDATA_ENDING;
        }
    }
    sCDataEnding() {
        const c = this.getCodeNorm();
        if (c === CLOSE_BRACKET) {
            this.state = S_CDATA_ENDING_2;
        }
        else {
            this.text += `]${String.fromCodePoint(c)}`;
            this.state = S_CDATA;
        }
    }
    sCDataEnding2() {
        var _a;
        const c = this.getCodeNorm();
        switch (c) {
            case GREATER: {
                (_a = this.cdataHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.text);
                this.text = "";
                this.state = S_TEXT;
                break;
            }
            case CLOSE_BRACKET:
                this.text += "]";
                break;
            default:
                this.text += `]]${String.fromCodePoint(c)}`;
                this.state = S_CDATA;
        }
    }
    // We need this separate state to check the first character fo the pi target
    // with this.nameStartCheck which allows less characters than this.nameCheck.
    sPIFirstChar() {
        const c = this.getCodeNorm();
        // This is first because in the case where the file is well-formed this is
        // the branch taken. We optimize for well-formedness.
        if (this.nameStartCheck(c)) {
            this.piTarget += String.fromCodePoint(c);
            this.state = S_PI_REST;
        }
        else if (c === QUESTION || isS(c)) {
            this.fail("processing instruction without a target.");
            this.state = c === QUESTION ? S_PI_ENDING : S_PI_BODY;
        }
        else {
            this.fail("disallowed character in processing instruction name.");
            this.piTarget += String.fromCodePoint(c);
            this.state = S_PI_REST;
        }
    }
    sPIRest() {
        // Capture characters into a piTarget while ``this.nameCheck`` run on the
        // character read returns true.
        const { chunk, i: start } = this;
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const c = this.getCodeNorm();
            if (c === EOC) {
                this.piTarget += chunk.slice(start);
                return;
            }
            // NL cannot satisfy this.nameCheck so we don't have to test specifically
            // for it.
            if (!this.nameCheck(c)) {
                this.piTarget += chunk.slice(start, this.prevI);
                const isQuestion = c === QUESTION;
                if (isQuestion || isS(c)) {
                    if (this.piTarget === "xml") {
                        if (!this.xmlDeclPossible) {
                            this.fail("an XML declaration must be at the start of the document.");
                        }
                        this.state = isQuestion ? S_XML_DECL_ENDING : S_XML_DECL_NAME_START;
                    }
                    else {
                        this.state = isQuestion ? S_PI_ENDING : S_PI_BODY;
                    }
                }
                else {
                    this.fail("disallowed character in processing instruction name.");
                    this.piTarget += String.fromCodePoint(c);
                }
                break;
            }
        }
    }
    sPIBody() {
        if (this.text.length === 0) {
            const c = this.getCodeNorm();
            if (c === QUESTION) {
                this.state = S_PI_ENDING;
            }
            else if (!isS(c)) {
                this.text = String.fromCodePoint(c);
            }
        }
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        else if (this.captureToChar(QUESTION)) {
            this.state = S_PI_ENDING;
        }
    }
    sPIEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === GREATER) {
            const { piTarget } = this;
            if (piTarget.toLowerCase() === "xml") {
                this.fail("the XML declaration must appear at the start of the document.");
            }
            (_a = this.piHandler) === null || _a === void 0 ? void 0 : _a.call(this, {
                target: piTarget,
                body: this.text,
            });
            this.piTarget = this.text = "";
            this.state = S_TEXT;
        }
        else if (c === QUESTION) {
            // We ran into ?? as part of a processing instruction. We initially took
            // the first ? as a sign that the PI was ending, but it is not. So we have
            // to add it to the body but we take the new ? as a sign that the PI is
            // ending.
            this.text += "?";
        }
        else {
            this.text += `?${String.fromCodePoint(c)}`;
            this.state = S_PI_BODY;
        }
        this.xmlDeclPossible = false;
    }
    sXMLDeclNameStart() {
        const c = this.skipSpaces();
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        if (c === QUESTION) {
            // It is valid to go to S_XML_DECL_ENDING from this state.
            this.state = S_XML_DECL_ENDING;
            return;
        }
        if (c !== EOC) {
            this.state = S_XML_DECL_NAME;
            this.name = String.fromCodePoint(c);
        }
    }
    sXMLDeclName() {
        const c = this.captureTo(XML_DECL_NAME_TERMINATOR);
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        if (c === QUESTION) {
            this.state = S_XML_DECL_ENDING;
            this.name += this.text;
            this.text = "";
            this.fail("XML declaration is incomplete.");
            return;
        }
        if (!(isS(c) || c === EQUAL)) {
            return;
        }
        this.name += this.text;
        this.text = "";
        if (!this.xmlDeclExpects.includes(this.name)) {
            switch (this.name.length) {
                case 0:
                    this.fail("did not expect any more name/value pairs.");
                    break;
                case 1:
                    this.fail(`expected the name ${this.xmlDeclExpects[0]}.`);
                    break;
                default:
                    this.fail(`expected one of ${this.xmlDeclExpects.join(", ")}`);
            }
        }
        this.state = c === EQUAL ? S_XML_DECL_VALUE_START : S_XML_DECL_EQ;
    }
    sXMLDeclEq() {
        const c = this.getCodeNorm();
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        if (c === QUESTION) {
            this.state = S_XML_DECL_ENDING;
            this.fail("XML declaration is incomplete.");
            return;
        }
        if (isS(c)) {
            return;
        }
        if (c !== EQUAL) {
            this.fail("value required.");
        }
        this.state = S_XML_DECL_VALUE_START;
    }
    sXMLDeclValueStart() {
        const c = this.getCodeNorm();
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        if (c === QUESTION) {
            this.state = S_XML_DECL_ENDING;
            this.fail("XML declaration is incomplete.");
            return;
        }
        if (isS(c)) {
            return;
        }
        if (!isQuote(c)) {
            this.fail("value must be quoted.");
            this.q = SPACE;
        }
        else {
            this.q = c;
        }
        this.state = S_XML_DECL_VALUE;
    }
    sXMLDeclValue() {
        const c = this.captureTo([this.q, QUESTION]);
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        if (c === QUESTION) {
            this.state = S_XML_DECL_ENDING;
            this.text = "";
            this.fail("XML declaration is incomplete.");
            return;
        }
        if (c === EOC) {
            return;
        }
        const value = this.text;
        this.text = "";
        switch (this.name) {
            case "version": {
                this.xmlDeclExpects = ["encoding", "standalone"];
                const version = value;
                this.xmlDecl.version = version;
                // This is the test specified by XML 1.0 but it is fine for XML 1.1.
                if (!/^1\.[0-9]+$/.test(version)) {
                    this.fail("version number must match /^1\\.[0-9]+$/.");
                }
                // When forceXMLVersion is set, the XML declaration is ignored.
                else if (!this.opt.forceXMLVersion) {
                    this.setXMLVersion(version);
                }
                break;
            }
            case "encoding":
                if (!/^[A-Za-z][A-Za-z0-9._-]*$/.test(value)) {
                    this.fail("encoding value must match \
/^[A-Za-z0-9][A-Za-z0-9._-]*$/.");
                }
                this.xmlDeclExpects = ["standalone"];
                this.xmlDecl.encoding = value;
                break;
            case "standalone":
                if (value !== "yes" && value !== "no") {
                    this.fail("standalone value must match \"yes\" or \"no\".");
                }
                this.xmlDeclExpects = [];
                this.xmlDecl.standalone = value;
                break;
            // We don't need to raise an error here since we've already raised one
            // when checking what name was expected.
        }
        this.name = "";
        this.state = S_XML_DECL_SEPARATOR;
    }
    sXMLDeclSeparator() {
        const c = this.getCodeNorm();
        // The question mark character is not valid inside any of the XML
        // declaration name/value pairs.
        if (c === QUESTION) {
            // It is valid to go to S_XML_DECL_ENDING from this state.
            this.state = S_XML_DECL_ENDING;
            return;
        }
        if (!isS(c)) {
            this.fail("whitespace required.");
            this.unget();
        }
        this.state = S_XML_DECL_NAME_START;
    }
    sXMLDeclEnding() {
        var _a;
        const c = this.getCodeNorm();
        if (c === GREATER) {
            if (this.piTarget !== "xml") {
                this.fail("processing instructions are not allowed before root.");
            }
            else if (this.name !== "version" &&
                this.xmlDeclExpects.includes("version")) {
                this.fail("XML declaration must contain a version.");
            }
            (_a = this.xmldeclHandler) === null || _a === void 0 ? void 0 : _a.call(this, this.xmlDecl);
            this.name = "";
            this.piTarget = this.text = "";
            this.state = S_TEXT;
        }
        else {
            // We got here because the previous character was a ?, but the question
            // mark character is not valid inside any of the XML declaration
            // name/value pairs.
            this.fail("The character ? is disallowed anywhere in XML declarations.");
        }
        this.xmlDeclPossible = false;
    }
    sOpenTag() {
        var _a;
        const c = this.captureNameChars();
        if (c === EOC) {
            return;
        }
        const tag = this.tag = {
            name: this.name,
            attributes: Object.create(null),
        };
        this.name = "";
        if (this.xmlnsOpt) {
            this.topNS = tag.ns = Object.create(null);
        }
        (_a = this.openTagStartHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        this.sawRoot = true;
        if (!this.fragmentOpt && this.closedRoot) {
            this.fail("documents may contain only one root.");
        }
        switch (c) {
            case GREATER:
                this.openTag();
                break;
            case FORWARD_SLASH:
                this.state = S_OPEN_TAG_SLASH;
                break;
            default:
                if (!isS(c)) {
                    this.fail("disallowed character in tag name.");
                }
                this.state = S_ATTRIB;
        }
    }
    sOpenTagSlash() {
        if (this.getCode() === GREATER) {
            this.openSelfClosingTag();
        }
        else {
            this.fail("forward-slash in opening tag not followed by >.");
            this.state = S_ATTRIB;
        }
    }
    sAttrib() {
        const c = this.skipSpaces();
        if (c === EOC) {
            return;
        }
        if (isNameStartChar(c)) {
            this.unget();
            this.state = S_ATTRIB_NAME;
        }
        else if (c === GREATER) {
            this.openTag();
        }
        else if (c === FORWARD_SLASH) {
            this.state = S_OPEN_TAG_SLASH;
        }
        else {
            this.fail("disallowed character in attribute name.");
        }
    }
    sAttribName() {
        const c = this.captureNameChars();
        if (c === EQUAL) {
            this.state = S_ATTRIB_VALUE;
        }
        else if (isS(c)) {
            this.state = S_ATTRIB_NAME_SAW_WHITE;
        }
        else if (c === GREATER) {
            this.fail("attribute without value.");
            this.pushAttrib(this.name, this.name);
            this.name = this.text = "";
            this.openTag();
        }
        else if (c !== EOC) {
            this.fail("disallowed character in attribute name.");
        }
    }
    sAttribNameSawWhite() {
        const c = this.skipSpaces();
        switch (c) {
            case EOC:
                return;
            case EQUAL:
                this.state = S_ATTRIB_VALUE;
                break;
            default:
                this.fail("attribute without value.");
                // Should we do this???
                // this.tag.attributes[this.name] = "";
                this.text = "";
                this.name = "";
                if (c === GREATER) {
                    this.openTag();
                }
                else if (isNameStartChar(c)) {
                    this.unget();
                    this.state = S_ATTRIB_NAME;
                }
                else {
                    this.fail("disallowed character in attribute name.");
                    this.state = S_ATTRIB;
                }
        }
    }
    sAttribValue() {
        const c = this.getCodeNorm();
        if (isQuote(c)) {
            this.q = c;
            this.state = S_ATTRIB_VALUE_QUOTED;
        }
        else if (!isS(c)) {
            this.fail("unquoted attribute value.");
            this.state = S_ATTRIB_VALUE_UNQUOTED;
            this.unget();
        }
    }
    sAttribValueQuoted() {
        // We deliberately do not use captureTo here. The specialized code we use
        // here is faster than using captureTo.
        const { q, chunk } = this;
        let { i: start } = this;
        // eslint-disable-next-line no-constant-condition
        while (true) {
            switch (this.getCode()) {
                case q:
                    this.pushAttrib(this.name, this.text + chunk.slice(start, this.prevI));
                    this.name = this.text = "";
                    this.q = null;
                    this.state = S_ATTRIB_VALUE_CLOSED;
                    return;
                case AMP:
                    this.text += chunk.slice(start, this.prevI);
                    this.state = S_ENTITY;
                    this.entityReturnState = S_ATTRIB_VALUE_QUOTED;
                    return;
                case NL:
                case NL_LIKE:
                case TAB:
                    this.text += `${chunk.slice(start, this.prevI)} `;
                    start = this.i;
                    break;
                case LESS:
                    this.text += chunk.slice(start, this.prevI);
                    this.fail("disallowed character.");
                    return;
                case EOC:
                    this.text += chunk.slice(start);
                    return;
            }
        }
    }
    sAttribValueClosed() {
        const c = this.getCodeNorm();
        if (isS(c)) {
            this.state = S_ATTRIB;
        }
        else if (c === GREATER) {
            this.openTag();
        }
        else if (c === FORWARD_SLASH) {
            this.state = S_OPEN_TAG_SLASH;
        }
        else if (isNameStartChar(c)) {
            this.fail("no whitespace between attributes.");
            this.unget();
            this.state = S_ATTRIB_NAME;
        }
        else {
            this.fail("disallowed character in attribute name.");
        }
    }
    sAttribValueUnquoted() {
        // We don't do anything regarding EOL or space handling for unquoted
        // attributes. We already have failed by the time we get here, and the
        // contract that saxes upholds states that upon failure, it is not safe to
        // rely on the data passed to event handlers (other than
        // ``onerror``). Passing "bad" data is not a problem.
        const c = this.captureTo(ATTRIB_VALUE_UNQUOTED_TERMINATOR);
        switch (c) {
            case AMP:
                this.state = S_ENTITY;
                this.entityReturnState = S_ATTRIB_VALUE_UNQUOTED;
                break;
            case LESS:
                this.fail("disallowed character.");
                break;
            case EOC:
                break;
            default:
                if (this.text.includes("]]>")) {
                    this.fail("the string \"]]>\" is disallowed in char data.");
                }
                this.pushAttrib(this.name, this.text);
                this.name = this.text = "";
                if (c === GREATER) {
                    this.openTag();
                }
                else {
                    this.state = S_ATTRIB;
                }
        }
    }
    sCloseTag() {
        const c = this.captureNameChars();
        if (c === GREATER) {
            this.closeTag();
        }
        else if (isS(c)) {
            this.state = S_CLOSE_TAG_SAW_WHITE;
        }
        else if (c !== EOC) {
            this.fail("disallowed character in closing tag.");
        }
    }
    sCloseTagSawWhite() {
        switch (this.skipSpaces()) {
            case GREATER:
                this.closeTag();
                break;
            case EOC:
                break;
            default:
                this.fail("disallowed character in closing tag.");
        }
    }
    // END OF STATE ENGINE METHODS
    handleTextInRoot() {
        // This is essentially a specialized version of captureTo which is optimized
        // for performing the ]]> check. A previous version of this code, checked
        // ``this.text`` for the presence of ]]>. It simplified the code but was
        // very costly when character data contained a lot of entities to be parsed.
        //
        // Since we are using a specialized loop, we also keep track of the presence
        // of ]]> in text data. The sequence ]]> is forbidden to appear as-is.
        //
        let { i: start, forbiddenState } = this;
        const { chunk, textHandler: handler } = this;
        // eslint-disable-next-line no-labels, no-restricted-syntax
        scanLoop: 
        // eslint-disable-next-line no-constant-condition
        while (true) {
            switch (this.getCode()) {
                case LESS: {
                    this.state = S_OPEN_WAKA;
                    if (handler !== undefined) {
                        const { text } = this;
                        const slice = chunk.slice(start, this.prevI);
                        if (text.length !== 0) {
                            handler(text + slice);
                            this.text = "";
                        }
                        else if (slice.length !== 0) {
                            handler(slice);
                        }
                    }
                    forbiddenState = FORBIDDEN_START;
                    // eslint-disable-next-line no-labels
                    break scanLoop;
                }
                case AMP:
                    this.state = S_ENTITY;
                    this.entityReturnState = S_TEXT;
                    if (handler !== undefined) {
                        this.text += chunk.slice(start, this.prevI);
                    }
                    forbiddenState = FORBIDDEN_START;
                    // eslint-disable-next-line no-labels
                    break scanLoop;
                case CLOSE_BRACKET:
                    switch (forbiddenState) {
                        case FORBIDDEN_START:
                            forbiddenState = FORBIDDEN_BRACKET;
                            break;
                        case FORBIDDEN_BRACKET:
                            forbiddenState = FORBIDDEN_BRACKET_BRACKET;
                            break;
                        case FORBIDDEN_BRACKET_BRACKET:
                            break;
                        default:
                            throw new Error("impossible state");
                    }
                    break;
                case GREATER:
                    if (forbiddenState === FORBIDDEN_BRACKET_BRACKET) {
                        this.fail("the string \"]]>\" is disallowed in char data.");
                    }
                    forbiddenState = FORBIDDEN_START;
                    break;
                case NL_LIKE:
                    if (handler !== undefined) {
                        this.text += `${chunk.slice(start, this.prevI)}\n`;
                    }
                    start = this.i;
                    forbiddenState = FORBIDDEN_START;
                    break;
                case EOC:
                    if (handler !== undefined) {
                        this.text += chunk.slice(start);
                    }
                    // eslint-disable-next-line no-labels
                    break scanLoop;
                default:
                    forbiddenState = FORBIDDEN_START;
            }
        }
        this.forbiddenState = forbiddenState;
    }
    handleTextOutsideRoot() {
        // This is essentially a specialized version of captureTo which is optimized
        // for a specialized task. We keep track of the presence of non-space
        // characters in the text since these are errors when appearing outside the
        // document root element.
        let { i: start } = this;
        const { chunk, textHandler: handler } = this;
        let nonSpace = false;
        // eslint-disable-next-line no-labels, no-restricted-syntax
        outRootLoop: 
        // eslint-disable-next-line no-constant-condition
        while (true) {
            const code = this.getCode();
            switch (code) {
                case LESS: {
                    this.state = S_OPEN_WAKA;
                    if (handler !== undefined) {
                        const { text } = this;
                        const slice = chunk.slice(start, this.prevI);
                        if (text.length !== 0) {
                            handler(text + slice);
                            this.text = "";
                        }
                        else if (slice.length !== 0) {
                            handler(slice);
                        }
                    }
                    // eslint-disable-next-line no-labels
                    break outRootLoop;
                }
                case AMP:
                    this.state = S_ENTITY;
                    this.entityReturnState = S_TEXT;
                    if (handler !== undefined) {
                        this.text += chunk.slice(start, this.prevI);
                    }
                    nonSpace = true;
                    // eslint-disable-next-line no-labels
                    break outRootLoop;
                case NL_LIKE:
                    if (handler !== undefined) {
                        this.text += `${chunk.slice(start, this.prevI)}\n`;
                    }
                    start = this.i;
                    break;
                case EOC:
                    if (handler !== undefined) {
                        this.text += chunk.slice(start);
                    }
                    // eslint-disable-next-line no-labels
                    break outRootLoop;
                default:
                    if (!isS(code)) {
                        nonSpace = true;
                    }
            }
        }
        if (!nonSpace) {
            return;
        }
        // We use the reportedTextBeforeRoot and reportedTextAfterRoot flags
        // to avoid reporting errors for every single character that is out of
        // place.
        if (!this.sawRoot && !this.reportedTextBeforeRoot) {
            this.fail("text data outside of root node.");
            this.reportedTextBeforeRoot = true;
        }
        if (this.closedRoot && !this.reportedTextAfterRoot) {
            this.fail("text data outside of root node.");
            this.reportedTextAfterRoot = true;
        }
    }
    pushAttribNS(name, value) {
        var _a;
        const { prefix, local } = this.qname(name);
        const attr = { name, prefix, local, value };
        this.attribList.push(attr);
        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);
        if (prefix === "xmlns") {
            const trimmed = value.trim();
            if (this.currentXMLVersion === "1.0" && trimmed === "") {
                this.fail("invalid attempt to undefine prefix in XML 1.0");
            }
            this.topNS[local] = trimmed;
            nsPairCheck(this, local, trimmed);
        }
        else if (name === "xmlns") {
            const trimmed = value.trim();
            this.topNS[""] = trimmed;
            nsPairCheck(this, "", trimmed);
        }
    }
    pushAttribPlain(name, value) {
        var _a;
        const attr = { name, value };
        this.attribList.push(attr);
        (_a = this.attributeHandler) === null || _a === void 0 ? void 0 : _a.call(this, attr);
    }
    /**
     * End parsing. This performs final well-formedness checks and resets the
     * parser to a clean state.
     *
     * @returns this
     */
    end() {
        var _a, _b;
        if (!this.sawRoot) {
            this.fail("document must contain a root element.");
        }
        const { tags } = this;
        while (tags.length > 0) {
            const tag = tags.pop();
            this.fail(`unclosed tag: ${tag.name}`);
        }
        if ((this.state !== S_BEGIN) && (this.state !== S_TEXT)) {
            this.fail("unexpected end.");
        }
        const { text } = this;
        if (text.length !== 0) {
            (_a = this.textHandler) === null || _a === void 0 ? void 0 : _a.call(this, text);
            this.text = "";
        }
        this._closed = true;
        (_b = this.endHandler) === null || _b === void 0 ? void 0 : _b.call(this);
        this._init();
        return this;
    }
    /**
     * Resolve a namespace prefix.
     *
     * @param prefix The prefix to resolve.
     *
     * @returns The namespace URI or ``undefined`` if the prefix is not defined.
     */
    resolve(prefix) {
        var _a, _b;
        let uri = this.topNS[prefix];
        if (uri !== undefined) {
            return uri;
        }
        const { tags } = this;
        for (let index = tags.length - 1; index >= 0; index--) {
            uri = tags[index].ns[prefix];
            if (uri !== undefined) {
                return uri;
            }
        }
        uri = this.ns[prefix];
        if (uri !== undefined) {
            return uri;
        }
        return (_b = (_a = this.opt).resolvePrefix) === null || _b === void 0 ? void 0 : _b.call(_a, prefix);
    }
    /**
     * Parse a qname into its prefix and local name parts.
     *
     * @param name The name to parse
     *
     * @returns
     */
    qname(name) {
        // This is faster than using name.split(":").
        const colon = name.indexOf(":");
        if (colon === -1) {
            return { prefix: "", local: name };
        }
        const local = name.slice(colon + 1);
        const prefix = name.slice(0, colon);
        if (prefix === "" || local === "" || local.includes(":")) {
            this.fail(`malformed name: ${name}.`);
        }
        return { prefix, local };
    }
    processAttribsNS() {
        var _a;
        const { attribList } = this;
        const tag = this.tag;
        {
            // add namespace info to tag
            const { prefix, local } = this.qname(tag.name);
            tag.prefix = prefix;
            tag.local = local;
            const uri = tag.uri = (_a = this.resolve(prefix)) !== null && _a !== void 0 ? _a : "";
            if (prefix !== "") {
                if (prefix === "xmlns") {
                    this.fail("tags may not have \"xmlns\" as prefix.");
                }
                if (uri === "") {
                    this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);
                    tag.uri = prefix;
                }
            }
        }
        if (attribList.length === 0) {
            return;
        }
        const { attributes } = tag;
        const seen = new Set();
        // Note: do not apply default ns to attributes:
        //   http://www.w3.org/TR/REC-xml-names/#defaulting
        for (const attr of attribList) {
            const { name, prefix, local } = attr;
            let uri;
            let eqname;
            if (prefix === "") {
                uri = name === "xmlns" ? XMLNS_NAMESPACE : "";
                eqname = name;
            }
            else {
                uri = this.resolve(prefix);
                // if there's any attributes with an undefined namespace,
                // then fail on them now.
                if (uri === undefined) {
                    this.fail(`unbound namespace prefix: ${JSON.stringify(prefix)}.`);
                    uri = prefix;
                }
                eqname = `{${uri}}${local}`;
            }
            if (seen.has(eqname)) {
                this.fail(`duplicate attribute: ${eqname}.`);
            }
            seen.add(eqname);
            attr.uri = uri;
            attributes[name] = attr;
        }
        this.attribList = [];
    }
    processAttribsPlain() {
        const { attribList } = this;
        // eslint-disable-next-line prefer-destructuring
        const attributes = this.tag.attributes;
        for (const { name, value } of attribList) {
            if (attributes[name] !== undefined) {
                this.fail(`duplicate attribute: ${name}.`);
            }
            attributes[name] = value;
        }
        this.attribList = [];
    }
    /**
     * Handle a complete open tag. This parser code calls this once it has seen
     * the whole tag. This method checks for well-formeness and then emits
     * ``onopentag``.
     */
    openTag() {
        var _a;
        this.processAttribs();
        const { tags } = this;
        const tag = this.tag;
        tag.isSelfClosing = false;
        // There cannot be any pending text here due to the onopentagstart that was
        // necessarily emitted before we get here. So we do not check text.
        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        tags.push(tag);
        this.state = S_TEXT;
        this.name = "";
    }
    /**
     * Handle a complete self-closing tag. This parser code calls this once it has
     * seen the whole tag. This method checks for well-formeness and then emits
     * ``onopentag`` and ``onclosetag``.
     */
    openSelfClosingTag() {
        var _a, _b, _c;
        this.processAttribs();
        const { tags } = this;
        const tag = this.tag;
        tag.isSelfClosing = true;
        // There cannot be any pending text here due to the onopentagstart that was
        // necessarily emitted before we get here. So we do not check text.
        (_a = this.openTagHandler) === null || _a === void 0 ? void 0 : _a.call(this, tag);
        (_b = this.closeTagHandler) === null || _b === void 0 ? void 0 : _b.call(this, tag);
        const top = this.tag = (_c = tags[tags.length - 1]) !== null && _c !== void 0 ? _c : null;
        if (top === null) {
            this.closedRoot = true;
        }
        this.state = S_TEXT;
        this.name = "";
    }
    /**
     * Handle a complete close tag. This parser code calls this once it has seen
     * the whole tag. This method checks for well-formeness and then emits
     * ``onclosetag``.
     */
    closeTag() {
        const { tags, name } = this;
        // Our state after this will be S_TEXT, no matter what, and we can clear
        // tagName now.
        this.state = S_TEXT;
        this.name = "";
        if (name === "") {
            this.fail("weird empty close tag.");
            this.text += "</>";
            return;
        }
        const handler = this.closeTagHandler;
        let l = tags.length;
        while (l-- > 0) {
            const tag = this.tag = tags.pop();
            this.topNS = tag.ns;
            handler === null || handler === void 0 ? void 0 : handler(tag);
            if (tag.name === name) {
                break;
            }
            this.fail("unexpected close tag.");
        }
        if (l === 0) {
            this.closedRoot = true;
        }
        else if (l < 0) {
            this.fail(`unmatched closing tag: ${name}.`);
            this.text += `</${name}>`;
        }
    }
    /**
     * Resolves an entity. Makes any necessary well-formedness checks.
     *
     * @param entity The entity to resolve.
     *
     * @returns The parsed entity.
     */
    parseEntity(entity) {
        // startsWith would be significantly slower for this test.
        if (entity[0] !== "#") {
            const defined = this.ENTITIES[entity];
            if (defined !== undefined) {
                return defined;
            }
            this.fail(this.isName(entity) ? "undefined entity." :
                "disallowed character in entity name.");
            return `&${entity};`;
        }
        let num = NaN;
        if (entity[1] === "x" && /^#x[0-9a-f]+$/i.test(entity)) {
            num = parseInt(entity.slice(2), 16);
        }
        else if (/^#[0-9]+$/.test(entity)) {
            num = parseInt(entity.slice(1), 10);
        }
        // The character reference is required to match the CHAR production.
        if (!this.isChar(num)) {
            this.fail("malformed character entity.");
            return `&${entity};`;
        }
        return String.fromCodePoint(num);
    }
}
SaxesParser_1 = saxes.SaxesParser = SaxesParser;var ssf$1 = {exports: {}};/* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */

(function (module) {
	/* vim: set ts=2: */
	/*jshint -W041 */
	var SSF = ({});
	var make_ssf = function make_ssf(SSF){
	SSF.version = '0.11.2';
	function _strrev(x) { var o = "", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }
	function fill(c,l) { var o = ""; while(o.length < l) o+=c; return o; }
	function pad0(v,d){var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
	function pad_(v,d){var t=""+v;return t.length>=d?t:fill(' ',d-t.length)+t;}
	function rpad_(v,d){var t=""+v; return t.length>=d?t:t+fill(' ',d-t.length);}
	function pad0r1(v,d){var t=""+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}
	function pad0r2(v,d){var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
	var p2_32 = Math.pow(2,32);
	function pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }
	function isgeneral(s, i) { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }
	var days = [
		['Sun', 'Sunday'],
		['Mon', 'Monday'],
		['Tue', 'Tuesday'],
		['Wed', 'Wednesday'],
		['Thu', 'Thursday'],
		['Fri', 'Friday'],
		['Sat', 'Saturday']
	];
	var months = [
		['J', 'Jan', 'January'],
		['F', 'Feb', 'February'],
		['M', 'Mar', 'March'],
		['A', 'Apr', 'April'],
		['M', 'May', 'May'],
		['J', 'Jun', 'June'],
		['J', 'Jul', 'July'],
		['A', 'Aug', 'August'],
		['S', 'Sep', 'September'],
		['O', 'Oct', 'October'],
		['N', 'Nov', 'November'],
		['D', 'Dec', 'December']
	];
	function init_table(t) {
		t[0]=  'General';
		t[1]=  '0';
		t[2]=  '0.00';
		t[3]=  '#,##0';
		t[4]=  '#,##0.00';
		t[9]=  '0%';
		t[10]= '0.00%';
		t[11]= '0.00E+00';
		t[12]= '# ?/?';
		t[13]= '# ??/??';
		t[14]= 'm/d/yy';
		t[15]= 'd-mmm-yy';
		t[16]= 'd-mmm';
		t[17]= 'mmm-yy';
		t[18]= 'h:mm AM/PM';
		t[19]= 'h:mm:ss AM/PM';
		t[20]= 'h:mm';
		t[21]= 'h:mm:ss';
		t[22]= 'm/d/yy h:mm';
		t[37]= '#,##0 ;(#,##0)';
		t[38]= '#,##0 ;[Red](#,##0)';
		t[39]= '#,##0.00;(#,##0.00)';
		t[40]= '#,##0.00;[Red](#,##0.00)';
		t[45]= 'mm:ss';
		t[46]= '[h]:mm:ss';
		t[47]= 'mmss.0';
		t[48]= '##0.0E+0';
		t[49]= '@';
		t[56]= '"上午/下午 "hh"時"mm"分"ss"秒 "';
	}

	var table_fmt = {};
	init_table(table_fmt);
	/* Defaults determined by systematically testing in Excel 2019 */

	/* These formats appear to default to other formats in the table */
	var default_map = [];
	var defi = 0;

	//  5 -> 37 ...  8 -> 40
	for(defi = 5; defi <= 8; ++defi) default_map[defi] = 32 + defi;

	// 23 ->  0 ... 26 ->  0
	for(defi = 23; defi <= 26; ++defi) default_map[defi] = 0;

	// 27 -> 14 ... 31 -> 14
	for(defi = 27; defi <= 31; ++defi) default_map[defi] = 14;
	// 50 -> 14 ... 58 -> 14
	for(defi = 50; defi <= 58; ++defi) default_map[defi] = 14;

	// 59 ->  1 ... 62 ->  4
	for(defi = 59; defi <= 62; ++defi) default_map[defi] = defi - 58;
	// 67 ->  9 ... 68 -> 10
	for(defi = 67; defi <= 68; ++defi) default_map[defi] = defi - 58;
	// 72 -> 14 ... 75 -> 17
	for(defi = 72; defi <= 75; ++defi) default_map[defi] = defi - 58;

	// 69 -> 12 ... 71 -> 14
	for(defi = 67; defi <= 68; ++defi) default_map[defi] = defi - 57;

	// 76 -> 20 ... 78 -> 22
	for(defi = 76; defi <= 78; ++defi) default_map[defi] = defi - 56;

	// 79 -> 45 ... 81 -> 47
	for(defi = 79; defi <= 81; ++defi) default_map[defi] = defi - 34;

	// 82 ->  0 ... 65536 -> 0 (omitted)

	/* These formats technically refer to Accounting formats with no equivalent */
	var default_str = [];

	//  5 -- Currency,   0 decimal, black negative
	default_str[5] = default_str[63] = '"$"#,##0_);\\("$"#,##0\\)';
	//  6 -- Currency,   0 decimal, red   negative
	default_str[6] = default_str[64] = '"$"#,##0_);[Red]\\("$"#,##0\\)';
	//  7 -- Currency,   2 decimal, black negative
	default_str[7] = default_str[65] = '"$"#,##0.00_);\\("$"#,##0.00\\)';
	//  8 -- Currency,   2 decimal, red   negative
	default_str[8] = default_str[66] = '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)';

	// 41 -- Accounting, 0 decimal, No Symbol
	default_str[41] = '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)';
	// 42 -- Accounting, 0 decimal, $  Symbol
	default_str[42] = '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)';
	// 43 -- Accounting, 2 decimal, No Symbol
	default_str[43] = '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)';
	// 44 -- Accounting, 2 decimal, $  Symbol
	default_str[44] = '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)';
	function frac(x, D, mixed) {
		var sgn = x < 0 ? -1 : 1;
		var B = x * sgn;
		var P_2 = 0, P_1 = 1, P = 0;
		var Q_2 = 1, Q_1 = 0, Q = 0;
		var A = Math.floor(B);
		while(Q_1 < D) {
			A = Math.floor(B);
			P = A * P_1 + P_2;
			Q = A * Q_1 + Q_2;
			if((B - A) < 0.00000005) break;
			B = 1 / (B - A);
			P_2 = P_1; P_1 = P;
			Q_2 = Q_1; Q_1 = Q;
		}
		if(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }
		if(!mixed) return [0, sgn * P, Q];
		var q = Math.floor(sgn * P/Q);
		return [q, sgn*P - q*Q, Q];
	}
	function parse_date_code(v,opts,b2) {
		if(v > 2958465 || v < 0) return null;
		var date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;
		var dout=[];
		var out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};
		if(Math.abs(out.u) < 1e-6) out.u = 0;
		if(opts && opts.date1904) date += 1462;
		if(out.u > 0.9999) {
			out.u = 0;
			if(++time == 86400) { out.T = time = 0; ++date; ++out.D; }
		}
		if(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}
		else if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}
		else {
			if(date > 60) --date;
			/* 1 = Jan 1 1900 in Gregorian */
			var d = new Date(1900, 0, 1);
			d.setDate(d.getDate() + date - 1);
			dout = [d.getFullYear(), d.getMonth()+1,d.getDate()];
			dow = d.getDay();
			if(date < 60) dow = (dow + 6) % 7;
			if(b2) dow = fix_hijri(d, dout);
		}
		out.y = dout[0]; out.m = dout[1]; out.d = dout[2];
		out.S = time % 60; time = Math.floor(time / 60);
		out.M = time % 60; time = Math.floor(time / 60);
		out.H = time;
		out.q = dow;
		return out;
	}
	SSF.parse_date_code = parse_date_code;
	var basedate = new Date(1899, 11, 31, 0, 0, 0);
	var dnthresh = basedate.getTime();
	var base1904 = new Date(1900, 2, 1, 0, 0, 0);
	function datenum_local(v, date1904) {
		var epoch = v.getTime();
		if(date1904) epoch -= 1461*24*60*60*1000;
		else if(v >= base1904) epoch += 24*60*60*1000;
		return (epoch - (dnthresh + (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);
	}
	/* The longest 32-bit integer text is "-4294967296", exactly 11 chars */
	function general_fmt_int(v) { return v.toString(10); }
	SSF._general_int = general_fmt_int;

	/* ECMA-376 18.8.30 numFmt*/
	/* Note: `toPrecision` uses standard form when prec > E and E >= -6 */
	var general_fmt_num = (function make_general_fmt_num() {
		var trailing_zeroes_and_decimal = /(?:\.0*|(\.\d*[1-9])0+)$/;
		function strip_decimal(o) {
			return (o.indexOf(".") == -1) ? o : o.replace(trailing_zeroes_and_decimal, "$1");
		}

		/* General Exponential always shows 2 digits exp and trims the mantissa */
		var mantissa_zeroes_and_decimal = /(?:\.0*|(\.\d*[1-9])0+)[Ee]/;
		var exp_with_single_digit = /(E[+-])(\d)$/;
		function normalize_exp(o) {
			if(o.indexOf("E") == -1) return o;
			return o.replace(mantissa_zeroes_and_decimal,"$1E").replace(exp_with_single_digit,"$10$2");
		}

		/* exponent >= -9 and <= 9 */
		function small_exp(v) {
			var w = (v<0?12:11);
			var o = strip_decimal(v.toFixed(12)); if(o.length <= w) return o;
			o = v.toPrecision(10); if(o.length <= w) return o;
			return v.toExponential(5);
		}

		/* exponent >= 11 or <= -10 likely exponential */
		function large_exp(v) {
			var o = strip_decimal(v.toFixed(11));
			return (o.length > (v<0?12:11) || o === "0" || o === "-0") ? v.toPrecision(6) : o;
		}

		function general_fmt_num_base(v) {
			var V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;

			if(V >= -4 && V <= -1) o = v.toPrecision(10+V);
			else if(Math.abs(V) <= 9) o = small_exp(v);
			else if(V === 10) o = v.toFixed(10).substr(0,12);
			else o = large_exp(v);

			return strip_decimal(normalize_exp(o.toUpperCase()));
		}

		return general_fmt_num_base;
	})();
	SSF._general_num = general_fmt_num;

	/*
		"General" rules:
		- text is passed through ("@")
		- booleans are rendered as TRUE/FALSE
		- "up to 11 characters" displayed for numbers
		- Default date format (code 14) used for Dates

		TODO: technically the display depends on the width of the cell
	*/
	function general_fmt(v, opts) {
		switch(typeof v) {
			case 'string': return v;
			case 'boolean': return v ? "TRUE" : "FALSE";
			case 'number': return (v|0) === v ? v.toString(10) : general_fmt_num(v);
			case 'undefined': return "";
			case 'object':
				if(v == null) return "";
				if(v instanceof Date) return format(14, datenum_local(v, opts && opts.date1904), opts);
		}
		throw new Error("unsupported value in General format: " + v);
	}
	SSF._general = general_fmt;
	function fix_hijri(date, o) {
	  /* TODO: properly adjust y/m/d and  */
	  o[0] -= 581;
	  var dow = date.getDay();
	  if(date < 60) dow = (dow + 6) % 7;
	  return dow;
	}
	/*jshint -W086 */
	function write_date(type, fmt, val, ss0) {
		var o="", ss=0, tt=0, y = val.y, out, outl = 0;
		switch(type) {
			case 98: /* 'b' buddhist year */
				y = val.y + 543;
				/* falls through */
			case 121: /* 'y' year */
			switch(fmt.length) {
				case 1: case 2: out = y % 100; outl = 2; break;
				default: out = y % 10000; outl = 4; break;
			} break;
			case 109: /* 'm' month */
			switch(fmt.length) {
				case 1: case 2: out = val.m; outl = fmt.length; break;
				case 3: return months[val.m-1][1];
				case 5: return months[val.m-1][0];
				default: return months[val.m-1][2];
			} break;
			case 100: /* 'd' day */
			switch(fmt.length) {
				case 1: case 2: out = val.d; outl = fmt.length; break;
				case 3: return days[val.q][0];
				default: return days[val.q][1];
			} break;
			case 104: /* 'h' 12-hour */
			switch(fmt.length) {
				case 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;
				default: throw 'bad hour format: ' + fmt;
			} break;
			case 72: /* 'H' 24-hour */
			switch(fmt.length) {
				case 1: case 2: out = val.H; outl = fmt.length; break;
				default: throw 'bad hour format: ' + fmt;
			} break;
			case 77: /* 'M' minutes */
			switch(fmt.length) {
				case 1: case 2: out = val.M; outl = fmt.length; break;
				default: throw 'bad minute format: ' + fmt;
			} break;
			case 115: /* 's' seconds */
				if(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;
				if(val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
	if(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
				else tt = ss0 === 1 ? 10 : 1;
				ss = Math.round((tt)*(val.S + val.u));
				if(ss >= 60*tt) ss = 0;
				if(fmt === 's') return ss === 0 ? "0" : ""+ss/tt;
				o = pad0(ss,2 + ss0);
				if(fmt === 'ss') return o.substr(0,2);
				return "." + o.substr(2,fmt.length-1);
			case 90: /* 'Z' absolute time */
			switch(fmt) {
				case '[h]': case '[hh]': out = val.D*24+val.H; break;
				case '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;
				case '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;
				default: throw 'bad abstime format: ' + fmt;
			} outl = fmt.length === 3 ? 1 : 2; break;
			case 101: /* 'e' era */
				out = y; outl = 1; break;
		}
		var outstr = outl > 0 ? pad0(out, outl) : "";
		return outstr;
	}
	/*jshint +W086 */
	function commaify(s) {
		var w = 3;
		if(s.length <= w) return s;
		var j = (s.length % w), o = s.substr(0,j);
		for(; j!=s.length; j+=w) o+=(o.length > 0 ? "," : "") + s.substr(j,w);
		return o;
	}
	var write_num = (function make_write_num(){
	var pct1 = /%/g;
	function write_num_pct(type, fmt, val){
		var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
		return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
	}
	function write_num_cm(type, fmt, val){
		var idx = fmt.length - 1;
		while(fmt.charCodeAt(idx-1) === 44) --idx;
		return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
	}
	function write_num_exp(fmt, val){
		var o;
		var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
		if(fmt.match(/^#+0.0E\+0$/)) {
			if(val == 0) return "0.0E+0";
			else if(val < 0) return "-" + write_num_exp(fmt, -val);
			var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
			var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
			if(ee < 0) ee += period;
			o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
			if(o.indexOf("e") === -1) {
				var fakee = Math.floor(Math.log(val)*Math.LOG10E);
				if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
				else o += "E+" + (fakee - ee);
				while(o.substr(0,2) === "0.") {
					o = o.charAt(0) + o.substr(2,period) + "." + o.substr(2+period);
					o = o.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");
				}
				o = o.replace(/\+-/,"-");
			}
			o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
		} else o = val.toExponential(idx);
		if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
		if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
		return o.replace("e","E");
	}
	var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
	function write_num_f1(r, aval, sign) {
		var den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);
		var myn = (rr - base*den), myd = den;
		return sign + (base === 0 ? "" : ""+base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + "/" + r[3] + pad0(myd,r[4].length));
	}
	function write_num_f2(r, aval, sign) {
		return sign + (aval === 0 ? "" : ""+aval) + fill(" ", r[1].length + 2 + r[4].length);
	}
	var dec1 = /^#*0*\.([0#]+)/;
	var closeparen = /\).*[0#]/;
	var phone = /\(###\) ###\\?-####/;
	function hashq(str) {
		var o = "", cc;
		for(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {
			case 35: break;
			case 63: o+= " "; break;
			case 48: o+= "0"; break;
			default: o+= String.fromCharCode(cc);
		}
		return o;
	}
	function rnd(val, d) { var dd = Math.pow(10,d); return ""+(Math.round(val * dd)/dd); }
	function dec(val, d) {
		var _frac = val - Math.floor(val), dd = Math.pow(10,d);
		if (d < ('' + Math.round(_frac * dd)).length) return 0;
		return Math.round(_frac * dd);
	}
	function carry(val, d) {
		if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
			return 1;
		}
		return 0;
	}
	function flr(val) {
		if(val < 2147483647 && val > -2147483648) return ""+(val >= 0 ? (val|0) : (val-1|0));
		return ""+Math.floor(val);
	}
	function write_num_flt(type, fmt, val) {
		if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
			var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
			if(val >= 0) return write_num_flt('n', ffmt, val);
			return '(' + write_num_flt('n', ffmt, -val) + ')';
		}
		if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
		if(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
		if(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
		if(fmt.charCodeAt(0) === 36) return "$"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
		var o;
		var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
		if(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);
		if(fmt.match(/^[#?]+$/)) {
			o = pad0r(val,0); if(o === "0") o = "";
			return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);
		if(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf("0"));
		if((r = fmt.match(dec1))) {
			o = rnd(val, r[1].length).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1])).replace(/\.(\d*)$/,function($$, $1) { return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
			return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
		}
		fmt = fmt.replace(/^#+([0.])/, "$1");
		if((r = fmt.match(/^(0*)\.(#*)$/))) {
			return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
		}
		if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval,0));
		if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(""+(Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length),r[1].length);
		}
		if((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,""),val);
		if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
			o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g,""), val));
			ri = 0;
			return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
		}
		if(fmt.match(phone)) {
			o = write_num_flt(type, "##########", val);
			return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
		}
		var oa = "";
		if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(r[4].length,7);
			ff = frac(aval, Math.pow(10,ri)-1, false);
			o = "" + sign;
			oa = write_num("n", r[1], ff[1]);
			if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
			o += oa + r[2] + "/" + r[3];
			oa = rpad_(ff[2],ri);
			if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
			o += oa;
			return o;
		}
		if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(Math.max(r[1].length, r[4].length),7);
			ff = frac(aval, Math.pow(10,ri)-1, true);
			return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
		}
		if((r = fmt.match(/^[#0?]+$/))) {
			o = pad0r(val, 0);
			if(fmt.length <= o.length) return o;
			return hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
			o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
			ri = o.indexOf(".");
			var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
			return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
		}
		if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
			ri = dec(val, r[1].length);
			return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(ri,r[1].length);
		}
		switch(fmt) {
			case "###,##0.00": return write_num_flt(type, "#,##0.00", val);
			case "###,###":
			case "##,###":
			case "#,###": var x = commaify(pad0r(aval,0)); return x !== "0" ? sign + x : "";
			case "###,###.00": return write_num_flt(type, "###,##0.00",val).replace(/^0\./,".");
			case "#,###.00": return write_num_flt(type, "#,##0.00",val).replace(/^0\./,".");
		}
		throw new Error("unsupported format |" + fmt + "|");
	}
	function write_num_cm2(type, fmt, val){
		var idx = fmt.length - 1;
		while(fmt.charCodeAt(idx-1) === 44) --idx;
		return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
	}
	function write_num_pct2(type, fmt, val){
		var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
		return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
	}
	function write_num_exp2(fmt, val){
		var o;
		var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
		if(fmt.match(/^#+0.0E\+0$/)) {
			if(val == 0) return "0.0E+0";
			else if(val < 0) return "-" + write_num_exp2(fmt, -val);
			var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
			var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
			if(ee < 0) ee += period;
			o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
			if(!o.match(/[Ee]/)) {
				var fakee = Math.floor(Math.log(val)*Math.LOG10E);
				if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
				else o += "E+" + (fakee - ee);
				o = o.replace(/\+-/,"-");
			}
			o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
		} else o = val.toExponential(idx);
		if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
		if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
		return o.replace("e","E");
	}
	function write_num_int(type, fmt, val) {
		if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
			var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
			if(val >= 0) return write_num_int('n', ffmt, val);
			return '(' + write_num_int('n', ffmt, -val) + ')';
		}
		if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
		if(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
		if(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
		if(fmt.charCodeAt(0) === 36) return "$"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
		var o;
		var r, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
		if(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);
		if(fmt.match(/^[#?]+$/)) {
			o = (""+val); if(val === 0) o = "";
			return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);
		if(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf("0"));
		if((r = fmt.match(dec1))) {
	o = (""+val).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1]));
			o = o.replace(/\.(\d*)$/,function($$, $1) {
	return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
			return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
		}
		fmt = fmt.replace(/^#+([0.])/, "$1");
		if((r = fmt.match(/^(0*)\.(#*)$/))) {
			return sign + (""+aval).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
		}
		if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify((""+aval));
		if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify((""+val)) + "." + fill('0',r[1].length);
		}
		if((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,""),val);
		if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
			o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g,""), val));
			ri = 0;
			return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
		}
		if(fmt.match(phone)) {
			o = write_num_int(type, "##########", val);
			return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
		}
		var oa = "";
		if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(r[4].length,7);
			ff = frac(aval, Math.pow(10,ri)-1, false);
			o = "" + sign;
			oa = write_num("n", r[1], ff[1]);
			if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
			o += oa + r[2] + "/" + r[3];
			oa = rpad_(ff[2],ri);
			if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
			o += oa;
			return o;
		}
		if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
			ri = Math.min(Math.max(r[1].length, r[4].length),7);
			ff = frac(aval, Math.pow(10,ri)-1, true);
			return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
		}
		if((r = fmt.match(/^[#0?]+$/))) {
			o = "" + val;
			if(fmt.length <= o.length) return o;
			return hashq(fmt.substr(0,fmt.length-o.length)) + o;
		}
		if((r = fmt.match(/^([#0]+)\.([#0]+)$/))) {
			o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
			ri = o.indexOf(".");
			var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
			return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
		}
		if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
			return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(""+val).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(0,r[1].length);
		}
		switch(fmt) {
			case "###,###":
			case "##,###":
			case "#,###": var x = commaify(""+aval); return x !== "0" ? sign + x : "";
			default:
				if(fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
		}
		throw new Error("unsupported format |" + fmt + "|");
	}
	return function write_num(type, fmt, val) {
		return (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
	};})();
	function split_fmt(fmt) {
		var out = [];
		var in_str = false/*, cc*/;
		for(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {
			case 34: /* '"' */
				in_str = !in_str; break;
			case 95: case 42: case 92: /* '_' '*' '\\' */
				++i; break;
			case 59: /* ';' */
				out[out.length] = fmt.substr(j,i-j);
				j = i+1;
		}
		out[out.length] = fmt.substr(j);
		if(in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
		return out;
	}
	SSF._split = split_fmt;
	var abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
	function fmt_is_date(fmt) {
		var i = 0, /*cc = 0,*/ c = "", o = "";
		while(i < fmt.length) {
			switch((c = fmt.charAt(i))) {
				case 'G': if(isgeneral(fmt, i)) i+= 6; i++; break;
				case '"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;){/*empty*/} ++i; break;
				case '\\': i+=2; break;
				case '_': i+=2; break;
				case '@': ++i; break;
				case 'B': case 'b':
					if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") return true;
					/* falls through */
				case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
					/* falls through */
				case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;
				case 'A': case 'a': case '上':
					if(fmt.substr(i, 3).toUpperCase() === "A/P") return true;
					if(fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
					if(fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
					++i; break;
				case '[':
					o = c;
					while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
					if(o.match(abstime)) return true;
					break;
				case '.':
					/* falls through */
				case '0': case '#':
					while(i < fmt.length && ("0#?.,E+-%".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\' && fmt.charAt(i+1) == "-" && "0#".indexOf(fmt.charAt(i+2))>-1))){/* empty */}
					break;
				case '?': while(fmt.charAt(++i) === c){/* empty */} break;
				case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;
				case '(': case ')': ++i; break;
				case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
					while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;
				case ' ': ++i; break;
				default: ++i; break;
			}
		}
		return false;
	}
	SSF.is_date = fmt_is_date;
	function eval_fmt(fmt, v, opts, flen) {
		var out = [], o = "", i = 0, c = "", lst='t', dt, j, cc;
		var hr='H';
		/* Tokenize */
		while(i < fmt.length) {
			switch((c = fmt.charAt(i))) {
				case 'G': /* General */
					if(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);
					out[out.length] = {t:'G', v:'General'}; i+=7; break;
				case '"': /* Literal text */
					for(o="";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);
					out[out.length] = {t:'t', v:o}; ++i; break;
				case '\\': var w = fmt.charAt(++i), t = (w === "(" || w === ")") ? w : 't';
					out[out.length] = {t:t, v:w}; ++i; break;
				case '_': out[out.length] = {t:'t', v:" "}; i+=2; break;
				case '@': /* Text Placeholder */
					out[out.length] = {t:'T', v:v}; ++i; break;
				case 'B': case 'b':
					if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") {
						if(dt==null) { dt=parse_date_code(v, opts, fmt.charAt(i+1) === "2"); if(dt==null) return ""; }
						out[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;
					}
					/* falls through */
				case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
					c = c.toLowerCase();
					/* falls through */
				case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':
					if(v < 0) return "";
					if(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return ""; }
					o = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;
					if(c === 'm' && lst.toLowerCase() === 'h') c = 'M';
					if(c === 'h') c = hr;
					out[out.length] = {t:c, v:o}; lst = c; break;
				case 'A': case 'a': case '上':
					var q={t:c, v:c};
					if(dt==null) dt=parse_date_code(v, opts);
					if(fmt.substr(i, 3).toUpperCase() === "A/P") { if(dt!=null) q.v = dt.H >= 12 ? "P" : "A"; q.t = 'T'; hr='h';i+=3;}
					else if(fmt.substr(i,5).toUpperCase() === "AM/PM") { if(dt!=null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = 'T'; i+=5; hr='h'; }
					else if(fmt.substr(i,5).toUpperCase() === "上午/下午") { if(dt!=null) q.v = dt.H >= 12 ? "下午" : "上午"; q.t = 'T'; i+=5; hr='h'; }
					else { q.t = "t"; ++i; }
					if(dt==null && q.t === 'T') return "";
					out[out.length] = q; lst = c; break;
				case '[':
					o = c;
					while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
					if(o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
					if(o.match(abstime)) {
						if(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return ""; }
						out[out.length] = {t:'Z', v:o.toLowerCase()};
						lst = o.charAt(1);
					} else if(o.indexOf("$") > -1) {
						o = (o.match(/\$([^-\[\]]*)/)||[])[1]||"$";
						if(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};
					}
					break;
				/* Numbers */
				case '.':
					if(dt != null) {
						o = c; while(++i < fmt.length && (c=fmt.charAt(i)) === "0") o += c;
						out[out.length] = {t:'s', v:o}; break;
					}
					/* falls through */
				case '0': case '#':
					o = c; while(++i < fmt.length && "0#?.,E+-%".indexOf(c=fmt.charAt(i)) > -1) o += c;
					out[out.length] = {t:'n', v:o}; break;
				case '?':
					o = c; while(fmt.charAt(++i) === c) o+=c;
					out[out.length] = {t:c, v:o}; lst = c; break;
				case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **
				case '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;
				case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
					o = c; while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);
					out[out.length] = {t:'D', v:o}; break;
				case ' ': out[out.length] = {t:c, v:c}; ++i; break;
				case '$': out[out.length] = {t:'t', v:'$'}; ++i; break;
				default:
					if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
					out[out.length] = {t:'t', v:c}; ++i; break;
			}
		}

		/* Scan for date/time parts */
		var bt = 0, ss0 = 0, ssm;
		for(i=out.length-1, lst='t'; i >= 0; --i) {
			switch(out[i].t) {
				case 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;
				case 's':
					if((ssm=out[i].v.match(/\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);
					if(bt < 3) bt = 3;
				/* falls through */
				case 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;
				case 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;
				case 'X': /*if(out[i].v === "B2");*/
					break;
				case 'Z':
					if(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
					if(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
					if(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
			}
		}
		/* time rounding depends on presence of minute / second / usec fields */
		switch(bt) {
			case 0: break;
			case 1:
	if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
				if(dt.S >=  60) { dt.S = 0; ++dt.M; }
				if(dt.M >=  60) { dt.M = 0; ++dt.H; }
				break;
			case 2:
	if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
				if(dt.S >=  60) { dt.S = 0; ++dt.M; }
				break;
		}

		/* replace fields */
		var nstr = "", jj;
		for(i=0; i < out.length; ++i) {
			switch(out[i].t) {
				case 't': case 'T': case ' ': case 'D': break;
				case 'X': out[i].v = ""; out[i].t = ";"; break;
				case 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':
	out[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
					out[i].t = 't'; break;
				case 'n': case '?':
					jj = i+1;
					while(out[jj] != null && (
						(c=out[jj].t) === "?" || c === "D" ||
						((c === " " || c === "t") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === "t" && out[jj+1].v === '/')) ||
						(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
						(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))
					)) {
						out[i].v += out[jj].v;
						out[jj] = {v:"", t:";"}; ++jj;
					}
					nstr += out[i].v;
					i = jj-1; break;
				case 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;
			}
		}
		var vv = "", myv, ostr;
		if(nstr.length > 0) {
			if(nstr.charCodeAt(0) == 40) /* '(' */ {
				myv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);
				ostr = write_num('n', nstr, myv);
			} else {
				myv = (v<0 && flen > 1 ? -v : v);
				ostr = write_num('n', nstr, myv);
				if(myv < 0 && out[0] && out[0].t == 't') {
					ostr = ostr.substr(1);
					out[0].v = "-" + out[0].v;
				}
			}
			jj=ostr.length-1;
			var decpt = out.length;
			for(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) { decpt = i; break; }
			var lasti=out.length;
			if(decpt === out.length && ostr.indexOf("E") === -1) {
				for(i=out.length-1; i>= 0;--i) {
					if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
					if(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }
					else if(jj < 0) out[i].v = "";
					else { out[i].v = ostr.substr(0, jj+1); jj = -1; }
					out[i].t = 't';
					lasti = i;
				}
				if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
			}
			else if(decpt !== out.length && ostr.indexOf("E") === -1) {
				jj = ostr.indexOf(".")-1;
				for(i=decpt; i>= 0; --i) {
					if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
					j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")-1:out[i].v.length-1;
					vv = out[i].v.substr(j+1);
					for(; j>=0; --j) {
						if(jj>=0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
					}
					out[i].v = vv;
					out[i].t = 't';
					lasti = i;
				}
				if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
				jj = ostr.indexOf(".")+1;
				for(i=decpt; i<out.length; ++i) {
					if(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;
					j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")+1:0;
					vv = out[i].v.substr(0,j);
					for(; j<out[i].v.length; ++j) {
						if(jj<ostr.length) vv += ostr.charAt(jj++);
					}
					out[i].v = vv;
					out[i].t = 't';
					lasti = i;
				}
			}
		}
		for(i=0; i<out.length; ++i) if(out[i] != null && 'n?'.indexOf(out[i].t)>-1) {
			myv = (flen >1 && v < 0 && i>0 && out[i-1].v === "-" ? -v:v);
			out[i].v = write_num(out[i].t, out[i].v, myv);
			out[i].t = 't';
		}
		var retval = "";
		for(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;
		return retval;
	}
	SSF._eval = eval_fmt;
	var cfregex = /\[[=<>]/;
	var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
	function chkcond(v, rr) {
		if(rr == null) return false;
		var thresh = parseFloat(rr[2]);
		switch(rr[1]) {
			case "=":  if(v == thresh) return true; break;
			case ">":  if(v >  thresh) return true; break;
			case "<":  if(v <  thresh) return true; break;
			case "<>": if(v != thresh) return true; break;
			case ">=": if(v >= thresh) return true; break;
			case "<=": if(v <= thresh) return true; break;
		}
		return false;
	}
	function choose_fmt(f, v) {
		var fmt = split_fmt(f);
		var l = fmt.length, lat = fmt[l-1].indexOf("@");
		if(l<4 && lat>-1) --l;
		if(fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
		if(typeof v !== "number") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:"@"];
		switch(fmt.length) {
			case 1: fmt = lat>-1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break;
			case 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break;
			case 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break;
		}
		var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
		if(fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
		if(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {
			var m1 = fmt[0].match(cfregex2);
			var m2 = fmt[1].match(cfregex2);
			return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
		}
		return [l, ff];
	}
	function format(fmt,v,o) {
		if(o == null) o = {};
		var sfmt = "";
		switch(typeof fmt) {
			case "string":
				if(fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
				else sfmt = fmt;
				break;
			case "number":
				if(fmt == 14 && o.dateNF) sfmt = o.dateNF;
				else sfmt = (o.table != null ? (o.table) : table_fmt)[fmt];
				if(sfmt == null) sfmt = (o.table && o.table[default_map[fmt]]) || table_fmt[default_map[fmt]];
				if(sfmt == null) sfmt = default_str[fmt] || "General";
				break;
		}
		if(isgeneral(sfmt,0)) return general_fmt(v, o);
		if(v instanceof Date) v = datenum_local(v, o.date1904);
		var f = choose_fmt(sfmt, v);
		if(isgeneral(f[1])) return general_fmt(v, o);
		if(v === true) v = "TRUE"; else if(v === false) v = "FALSE";
		else if(v === "" || v == null) return "";
		return eval_fmt(f[1], v, o, f[0]);
	}
	function load_entry(fmt, idx) {
		if(typeof idx != 'number') {
			idx = +idx || -1;
	for(var i = 0; i < 0x0188; ++i) {
	if(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }
				if(table_fmt[i] == fmt) { idx = i; break; }
			}
	if(idx < 0) idx = 0x187;
		}
	table_fmt[idx] = fmt;
		return idx;
	}
	SSF.load = load_entry;
	SSF._table = table_fmt;
	SSF.get_table = function get_table() { return table_fmt; };
	SSF.load_table = function load_table(tbl) {
		for(var i=0; i!=0x0188; ++i)
			if(tbl[i] !== undefined) load_entry(tbl[i], i);
	};
	SSF.init_table = init_table;
	SSF.format = format;
	};
	make_ssf(SSF);
	/*global module */
	if(typeof DO_NOT_EXPORT_SSF === 'undefined') module.exports = SSF;
} (ssf$1));

var ssf = ssf$1.exports;function xlsx2csvBuilder(Zip, connect, MAX) {

    const ssf_table = ssf.get_table();

    function parse_xml(xml, callback) {

        return new Promise((resolve, reject) => {
            if (!xml) return resolve()
            let unresolved = true;

            let status = { stop: false };

            const stop = () => {
                status.stop = true;
            };

            const resolveonce = () => {
                if (unresolved) {
                    unresolved = false;
                    resolve();
                }
            };

            const parser = new SaxesParser_1();
            parser.on('end', resolveonce);
            parser.on('error', e => {
                if (status.stop) {
                    return resolveonce()
                }
                reject(e);
            });

            let path = [];
            let text = undefined;

            parser.on('opentag', (data) => {
                const { name, attributes } = data;
                path.unshift({ name, attributes });
            });

            parser.on('text', (data) => {
                text = data;
            });

            parser.on('closetag', async (data) => {
                path.shift();
                const { name, attributes } = data;
                data = text === undefined ? { name, attributes } : { name, attributes, text };
                text = undefined;
                try {
                    await callback(name, data, [...path], stop);
                } catch (e) {
                    console.error(e);
                }
            });

            connect(xml, parser, status);
        })
    }

    async function parse_workbook(xml) {

        let sheets = [];
        let activeTab = 0;

        await parse_xml(xml, (name, data, path) => {
            if (name === 'sheet') {
                sheets.push(data.attributes);
            } else if (name === 'workbookView') {
                if (data.attributes.activeTab) {
                    activeTab = Number(data.attributes.activeTab);
                }
            }
        });

        return { sheets, activeTab }
    }

    async function parse_workbook_rels(xml) {

        let rels = {};

        await parse_xml(xml, (name, data, path) => {
            if (name === 'Relationship') {
                const { Id, Target } = data.attributes;
                rels[Id] = Target;
            }
        });

        return rels
    }

    async function parse_sharedStrings(xml) {

        let texts = [];
        let items = [];
        await parse_xml(xml, (name, data, path) => {
            if (name === 'si') {
                texts.push(items.join(''));
                items = [];
            } else if (name === 't') {
                items.push(data.text);
            }
        });

        return texts
    }

    async function parse_styles(xml) {
        let formats = [];
        let numberFormats = {};
        await parse_xml(xml, (name, data, path) => {
            if (name === 'numFmt' && path[0].name === 'numFmts') {
                const { numFmtId, formatCode } = data.attributes;
                numberFormats[numFmtId] = formatCode;
            } else if (name === 'xf' && path[0].name === 'cellXfs') {
                const { numFmtId } = data.attributes;
                formats.push(Number(numFmtId));
            }
        });

        formats = formats.map(numFmtId => numberFormats[numFmtId] || ssf_table[numFmtId] || numFmtId);

        return formats
    }

    function formatDate(value) {
        const { y, m, d, H, M, S } = ssf.parse_date_code(value);
        const [YYYY, MM, DD, hh, mm, ss] = [y, m, d, H, M, S].map(num => String(num).padStart(2, '0'));
        return `${YYYY}-${MM}-${DD} ${hh}:${mm}:${ss}`
    }

    function r2ci(r) {
        const letters = r.replace(/[0-9]/g, '');
        return letters.split('').reduce((r, a) => r * 26 + parseInt(a, 36) - 9, 0) - 1
    }

    async function parse_sheet(xml, texts, formats, callback) {

        let cells = [];
        let i = 0;

        let count = 0;

        await parse_xml(xml, (name, data, path, stop) => {
            if (name === 'row' || name === 'x:row') {
                if (cells.length > 0 && !cells.every(cell => cell === '' || cell === undefined)) {
                    if (count > MAX) {
                        stop();
                    } else {
                        callback(cells);
                        count++;
                    }
                }
                i = 0;
                cells = [];
            } else if (name === 'v' || name === 'x:v') {
                const c = path[0];
                const t = c.attributes.t;
                const r = c.attributes.r;

                const ci = r ? r2ci(r) : i;
                const formatId = c.attributes.s;
                let text = data.text || '';
                text = text.trim();

                if (text.length > 0) {
                    if (t === 's') {
                        text = texts[text];
                    } else if (t === 'b') {
                        text = text === '0' ? 'FALSE' : 'TRUE';
                    } else if (t === 'e') {
                        text = '';
                    } else if (formatId) {
                        let value = parseFloat(text);
                        if (!isNaN(value)) {
                            let numFormat = formats[formatId];
                            if (typeof numFormat === 'string') {
                                const isDate = ssf.is_date(numFormat);
                                if (isDate) {
                                    text = /[yd]/.test(numFormat) ? formatDate(value) : ssf.format(numFormat, value);
                                } else {
                                    text = value;
                                }
                            } else if (numFormat) {
                                text = ssf.format(numFormat, value);
                            } else {
                                text = value;
                            }
                        }
                    }
                }

                if (r === undefined && text === '') return

                cells[ci] = text;
                i++;
            } else if (name === 't' || name === 'x:t') {
                const c = path[1];
                const t = c.attributes.t;
                const r = c.attributes.r;
                const ci = r ? r2ci(r) : i;
                if (t === 'inlineStr') {
                    cells[ci] = data.text;
                    i++;
                }
            }
        });
    }

    return async function xlsx2csv(xlsx, callback = console.log) {
        const zip = await Zip.loadAsync(xlsx);
        const workbook_xml = await zip.getXML('xl/workbook.xml');
        const { sheets, activeTab } = await parse_workbook(workbook_xml);
        const sharedStrings_xml = await zip.getXML('xl/sharedStrings.xml');
        const texts = await parse_sharedStrings(sharedStrings_xml);
        const styles_xml = await zip.getXML('xl/styles.xml');
        const styles = await parse_styles(styles_xml);
        const rels_xml = await zip.getXML('xl/_rels/workbook.xml.rels');
        const rels = await parse_workbook_rels(rels_xml);
        const sheet1_path = sheets.length > activeTab ? `xl/${rels[sheets[activeTab]['r:id']].replace(/^\/xl\//, '')}` : 'xl/worksheets/sheet1.xml';
        const sheet1_xml = await zip.getXML(sheet1_path);
        await parse_sheet(sheet1_xml, texts, styles, callback);
        await zip.close();
    }
}var index_browser = xlsx2csvBuilder(Zip, connect, MAX);return index_browser;}));